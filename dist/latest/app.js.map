{"version":3,"file":"app.js","sources":["../../src/web/Plugins.ts","../../src/web/Extensions.ts","../../src/web/Shared.ts","../../src/web/App.ts"],"sourcesContent":["import { BlockSvg } from \"blockly\";\r\nimport {\r\n    MenuOption,\r\n    MouseCoords,\r\n    PluginApi,\r\n    RegistryMenuItem,\r\n} from \"./Extensions\";\r\nimport {\r\n    RegistryItem,\r\n    Scope,\r\n    ScopeType,\r\n} from \"blockly/core/contextmenu_registry\";\r\n\r\ninterface BaseManifest {\r\n    loadAsModule?: boolean;\r\n    main: string;\r\n}\r\n\r\nexport interface PluginManagerManifest extends BaseManifest {\r\n    baseUrl: string;\r\n}\r\n\r\ninterface PluginManifest extends BaseManifest {\r\n    id: string;\r\n    name?: string;\r\n    version?: string;\r\n    description?: string;\r\n    author?: string;\r\n}\r\n\r\ninterface PluginData {\r\n    baseUrl: string;\r\n    manifest: PluginManifest;\r\n}\r\n\r\ninterface InitData {\r\n    version: string;\r\n    api: PluginApi;\r\n    pluginManager?: PluginManagerManifest;\r\n}\r\n\r\nclass BasePlugin {\r\n    readonly initData: InitData;\r\n    readonly baseUrl: string;\r\n    readonly manifest: PluginManifest;\r\n\r\n    constructor(initData: InitData, baseUrl: string, manifest: PluginManifest) {\r\n        this.initData = initData;\r\n        this.baseUrl = baseUrl;\r\n        this.manifest = manifest;\r\n    }\r\n\r\n    public initializeWorkspace(): void {\r\n        //Do nothing\r\n    }\r\n\r\n    public getUrl(relativeUrl: string): string {\r\n        return `${this.baseUrl}/${relativeUrl}`;\r\n    }\r\n\r\n    public getMouseCoords(): MouseCoords {\r\n        return this.initData.api.getMouseCoords();\r\n    }\r\n\r\n    public getSelectedBlocks(scope: Scope): Array<BlockSvg> {\r\n        return this.initData.api.getSelectedBlocks(scope);\r\n    }\r\n\r\n    public showContextMenuWithBack(options: Array<MenuOption>): void {\r\n        return this.initData.api.showContextMenuWithBack(options);\r\n    }\r\n\r\n    public registerMenu(menu: RegistryMenuItem): void {\r\n        return this.initData.api.registerMenu(menu);\r\n    }\r\n\r\n    public registerItem(item: RegistryItem): void {\r\n        return this.initData.api.registerItem(item);\r\n    }\r\n\r\n    public createMenu(\r\n        id: string,\r\n        name: string,\r\n        scopeType: ScopeType,\r\n    ): RegistryMenuItem {\r\n        return this.initData.api.createMenu(id, name, scopeType);\r\n    }\r\n\r\n    public getExtensionVersion(): string {\r\n        return this.initData.version;\r\n    }\r\n}\r\n\r\nconst plugins: Map<string, BasePlugin> = new Map<string, BasePlugin>();\r\n\r\nlet initData: InitData;\r\n\r\nexport function init(data: InitData): void {\r\n    initData = data;\r\n\r\n    if (data.pluginManager) {\r\n        loadPluginManager(data.pluginManager);\r\n    }\r\n}\r\n\r\nfunction loadPluginManager(pluginManager: PluginManagerManifest): void {\r\n    loadPlugin({\r\n        baseUrl: pluginManager.baseUrl,\r\n        manifest: {\r\n            id: \"plugin-manager\",\r\n            loadAsModule: pluginManager.loadAsModule || false,\r\n            main: pluginManager.main,\r\n        },\r\n    });\r\n}\r\n\r\nfunction loadPlugin(pluginData: PluginData): void {\r\n    try {\r\n        const plugin: BasePlugin = new BasePlugin(\r\n            initData,\r\n            pluginData.baseUrl,\r\n            pluginData.manifest,\r\n        );\r\n        plugins.set(pluginData.manifest.id, plugin);\r\n\r\n        const scriptElement: HTMLScriptElement =\r\n            document.createElement(\"script\");\r\n        scriptElement.setAttribute(\r\n            \"type\",\r\n            pluginData.manifest.loadAsModule ? \"module\" : \"text/javascript\",\r\n        );\r\n        scriptElement.setAttribute(\r\n            \"src\",\r\n            plugin.getUrl(pluginData.manifest.main),\r\n        );\r\n        scriptElement.addEventListener(\"load\", function () {\r\n            plugin.initializeWorkspace();\r\n        });\r\n\r\n        document.body.appendChild(scriptElement);\r\n    } catch (e) {\r\n        BF2042Portal.Shared.logError(\r\n            `Failed to load plugin '${\r\n                pluginData.manifest?.name || pluginData.manifest.id\r\n            }''`,\r\n            e,\r\n        );\r\n    }\r\n}\r\n\r\nfunction initializeWorkspace(): void {\r\n    for (const plugin of plugins.values()) {\r\n        plugin.initializeWorkspace();\r\n    }\r\n}\r\n\r\nfunction getPlugin(id: string): BasePlugin {\r\n    const plugin: BasePlugin = plugins.get(id);\r\n\r\n    if (!plugin) {\r\n        throw `Plugin with id ${id} not found!`;\r\n    }\r\n\r\n    return plugin;\r\n}\r\n\r\nexport default {\r\n    initializeWorkspace: initializeWorkspace,\r\n    getPlugin: getPlugin,\r\n    loadPlugin: loadPlugin,\r\n};\r\n","import { Block, BlockSvg, Events, WorkspaceSvg } from \"blockly\";\r\nimport {\r\n    ContextMenuOption,\r\n    RegistryItem,\r\n} from \"blockly/core/contextmenu_registry\";\r\nimport { init as pluginInit } from \"./Plugins\";\r\nimport { BlockDefinition } from \"blockly/core/blocks\";\r\nimport { ScopeType } from \"blockly/core/contextmenu_registry\";\r\nimport { Scope } from \"blockly/core/contextmenu_registry\";\r\nimport { BlockMove, Click, Selected } from \"blockly/core/events/events\";\r\nimport { BlockDrag } from \"blockly/core/events/events_block_drag\";\r\nimport { Coordinate } from \"blockly/core/utils\";\r\nimport { createElement } from \"blockly/core/utils/xml\";\r\nimport { mouseToSvg } from \"blockly/core/browser_events\";\r\nimport {\r\n    domToText,\r\n    domToVariables,\r\n    domToWorkspace,\r\n    textToDom,\r\n    workspaceToDom,\r\n} from \"blockly/core/xml\";\r\n\r\ninterface BlocklyWrapper {\r\n    Events: typeof Events;\r\n\r\n    Blocks: {\r\n        getSelected(): BlockSvg;\r\n        getAllClasses(): Array<{ key: string; value: BlockDefinition }>;\r\n        getAllInstances(): Array<{ key: string; value: BlockSvg }>;\r\n    };\r\n\r\n    ContextMenu: {\r\n        ScopeType: typeof ScopeType;\r\n\r\n        show(\r\n            event: Event,\r\n            options: Array<ContextMenuOption>,\r\n            rtl: boolean,\r\n        ): void;\r\n        getOptionsForWorkspace(\r\n            workspace: WorkspaceSvg,\r\n        ): Array<ContextMenuOption>;\r\n        getOptionsForBlock(block: BlockSvg): Array<ContextMenuOption>;\r\n        getAllItems(): Array<{ key: string; value: RegistryItem }>;\r\n        unregisterItem(item: string): void;\r\n        registerItem(item: RegistryItem): void;\r\n    };\r\n\r\n    Xml: {\r\n        createElement: typeof createElement;\r\n        mouseToSvg: typeof mouseToSvg;\r\n\r\n        workspaceToDom: typeof workspaceToDom;\r\n        textToDom: typeof textToDom;\r\n\r\n        domToWorkspace: typeof domToWorkspace;\r\n        domToVariables: typeof domToVariables;\r\n        domToText: typeof domToText;\r\n\r\n        blockToXml: (block: BlockSvg) => string;\r\n    };\r\n\r\n    getMainWorkspace(): WorkspaceSvg;\r\n    getTranslation(key: string): string;\r\n}\r\n\r\nfunction blocklyWrapper(\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    blockly: any,\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    blocklyTranslations: any,\r\n): BlocklyWrapper {\r\n    const self: BlocklyWrapper = {} as BlocklyWrapper;\r\n\r\n    self.Events = blockly.Events;\r\n\r\n    self.getMainWorkspace = function (): WorkspaceSvg {\r\n        return blockly.getMainWorkspace();\r\n    };\r\n\r\n    self.getTranslation = function (key: string): string {\r\n        const splitKeys = key.split(\".\");\r\n\r\n        let firstElement = blocklyTranslations.Msg.Msg[splitKeys[0]];\r\n\r\n        for (let index = 1; index < splitKeys.length; index++) {\r\n            firstElement = firstElement[splitKeys[index]];\r\n        }\r\n\r\n        return firstElement;\r\n    };\r\n\r\n    self.Blocks = {\r\n        getSelected: function (): BlockSvg {\r\n            return blockly.getSelected();\r\n        },\r\n\r\n        getAllClasses: function (): Array<{\r\n            key: string;\r\n            value: BlockDefinition;\r\n        }> {\r\n            return Object.keys(blockly.Blocks).map((e: string) => {\r\n                return {\r\n                    key: e,\r\n                    value: blockly.Blocks[e],\r\n                };\r\n            });\r\n        },\r\n\r\n        getAllInstances: function (): Array<{ key: string; value: BlockSvg }> {\r\n            return self\r\n                .getMainWorkspace()\r\n                .getAllBlocks(false)\r\n                .map((e: BlockSvg) => {\r\n                    return {\r\n                        key: e.id,\r\n                        value: e,\r\n                    };\r\n                });\r\n        },\r\n    };\r\n\r\n    self.ContextMenu = {\r\n        ScopeType: {\r\n            BLOCK: blockly.ContextMenuRegistry.ScopeType.BLOCK,\r\n            WORKSPACE: blockly.ContextMenuRegistry.ScopeType.WORKSPACE,\r\n        },\r\n\r\n        show: function (\r\n            event: Event,\r\n            options: Array<ContextMenuOption>,\r\n            rtl: boolean,\r\n        ): void {\r\n            blockly.ContextMenu.show(event, options, rtl);\r\n        },\r\n\r\n        getOptionsForWorkspace: function (\r\n            workspace: WorkspaceSvg,\r\n        ): Array<ContextMenuOption> {\r\n            return blockly.ContextMenuRegistry.registry.getContextMenuOptions(\r\n                self.ContextMenu.ScopeType.WORKSPACE,\r\n                {\r\n                    workspace: workspace,\r\n                },\r\n            );\r\n        },\r\n\r\n        getOptionsForBlock: function (\r\n            block: BlockSvg,\r\n        ): Array<ContextMenuOption> {\r\n            return blockly.ContextMenuRegistry.registry.getContextMenuOptions(\r\n                self.ContextMenu.ScopeType.BLOCK,\r\n                {\r\n                    block: block,\r\n                },\r\n            );\r\n        },\r\n\r\n        getAllItems: function (): Array<{ key: string; value: RegistryItem }> {\r\n            return [...blockly.ContextMenuRegistry.registry.registry_].map(\r\n                (e: { [0]: string; [1]: RegistryItem }) => {\r\n                    return {\r\n                        key: e[0],\r\n                        value: e[1],\r\n                    };\r\n                },\r\n            );\r\n        },\r\n\r\n        unregisterItem: function (item: string): void {\r\n            blockly.ContextMenuRegistry.registry.unregister(item);\r\n        },\r\n\r\n        registerItem: function (item: RegistryItem): void {\r\n            blockly.ContextMenuRegistry.registry.register(item);\r\n        },\r\n    };\r\n\r\n    self.Xml = {\r\n        createElement: blockly.utils.xml.createElement,\r\n        mouseToSvg: blockly.browserEvents.mouseToSvg,\r\n\r\n        workspaceToDom: blockly.Xml.workspaceToDom,\r\n        textToDom: blockly.Xml.textToDom,\r\n\r\n        domToWorkspace: blockly.Xml.domToWorkspace,\r\n        domToVariables: blockly.Xml.domToVariables,\r\n        domToText: blockly.Xml.domToText,\r\n\r\n        blockToXml: function (block: BlockSvg): string {\r\n            const xmlDom = blockly.Xml.blockToDomWithXY(block, true);\r\n            blockly.Xml.deleteNext(xmlDom);\r\n\r\n            const xmlText = blockly.Xml.domToText(xmlDom).replace(\r\n                'xmlns=\"https://developers.google.com/blockly/xml\"',\r\n                \"\",\r\n            );\r\n\r\n            return xmlText;\r\n        },\r\n    };\r\n\r\n    return self;\r\n}\r\n\r\nconst BlocklyWrapper = blocklyWrapper(_Blockly, Blockly);\r\n\r\ninterface BlocklyConfig {\r\n    menus: {\r\n        [key: string]: RegistryMenuItem;\r\n    };\r\n    items: {\r\n        [key: string]: RegistryItem;\r\n    };\r\n}\r\n\r\nconst blocklyConfig: BlocklyConfig = {\r\n    menus: {},\r\n    items: {},\r\n};\r\n\r\ninterface BlockLookup {\r\n    type: string;\r\n    category: string;\r\n    internalName: string;\r\n    displayName: string;\r\n}\r\n\r\ninterface BlockCategory {\r\n    internalName: string;\r\n    displayName: string;\r\n    contents: Array<BlockLookup>;\r\n}\r\n\r\nexport interface MouseCoords {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface LastContextMenu {\r\n    e: Event;\r\n    options: Array<MenuOption>;\r\n    rtl: boolean;\r\n}\r\n\r\n//NOTE: This is a subset of ContextMenuOption\r\nexport interface MenuOption {\r\n    text: string;\r\n    enabled: boolean;\r\n    callback: () => void;\r\n}\r\n\r\nexport type RegistryMenuItem = RegistryItem & {\r\n    options: Array<string>;\r\n};\r\n\r\nconst mouseCoords: MouseCoords = {\r\n    x: 0,\r\n    y: 0,\r\n};\r\n\r\ninterface JsonWorkspaceFile {\r\n    variables: string;\r\n    mainWorkspace: string;\r\n}\r\n\r\nconst contextMenuStack: Array<Array<MenuOption>> = [];\r\nlet lastContextMenu: LastContextMenu = undefined;\r\n\r\nconst blockLookup: Array<BlockLookup> = [];\r\nconst blockCategories: Array<BlockCategory> = [];\r\n\r\nconst selectedBlocks: Array<BlockSvg> = [];\r\n\r\nlet shiftKey = false;\r\n\r\nconst imageDataUrlCache = new Map<string, string>();\r\n\r\n//Blockly functions - Items\r\nfunction copyToClipboard(): RegistryItem {\r\n    const errorMessage = \"Не удалось скопировать в буфер обмена!\";\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    async function callback(scope: Scope): Promise<void> {\r\n        try {\r\n            const blocks = getSelectedBlocks(scope);\r\n            const xmlText = saveXml(blocks);\r\n\r\n            if (!xmlText) {\r\n                alert(errorMessage);\r\n\r\n                return;\r\n            }\r\n\r\n            await BF2042Portal.Shared.copyTextToClipboard(xmlText);\r\n        } catch (e) {\r\n            BF2042Portal.Shared.logError(errorMessage, e);\r\n\r\n            alert(errorMessage);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"copyToClipboard\",\r\n        displayText: \"Скопировать в буфер обмена\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction pasteFromClipboard(): RegistryItem {\r\n    const errorMessage = \"Не удалось вставить из буфера обмена!\";\r\n\r\n    //NOTE: Unfortunately precondition cannot be async, so we cannot check if the clipboard contains valid XML beforehand.\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    async function callback(): Promise<void> {\r\n        try {\r\n            const xmlText = await BF2042Portal.Shared.pasteTextFromClipboard();\r\n\r\n            if (!loadXml(xmlText)) {\r\n                alert(errorMessage);\r\n            }\r\n        } catch (e) {\r\n            BF2042Portal.Shared.logError(errorMessage, e);\r\n\r\n            alert(errorMessage);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"pasteFromClipboard\",\r\n        displayText: \"Вставить из буфера обмена\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction toggleComments(): RegistryItem {\r\n    function displayText(scope: Scope): string {\r\n        const toggleType = scope.block.getCommentIcon() ? \"Удалить\" : \"Добавить\";\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks.length === 1) {\r\n            return `${toggleType} комментарий`;\r\n        }\r\n\r\n        return `${toggleType} комментарий (${blocks.length} блоков)`;\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const commentText = scope.block.getCommentIcon() ? null : \"\";\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            blocks[i].setCommentText(commentText);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"toggleComments\",\r\n        displayText: displayText,\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction toggleInputs(): RegistryItem {\r\n    function displayText(scope: Scope): string {\r\n        const toggleType = scope.block.getInputsInline()\r\n            ? \"Вертикально\"\r\n            : \"Горизонтально\";\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks.length === 1) {\r\n            return `Показать входы ${toggleType}`;\r\n        }\r\n\r\n        return `Показать входы ${toggleType} (${blocks.length} блоков)`;\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const isInputInline = !scope.block.getInputsInline();\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            blocks[i].setInputsInline(isInputInline);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"toggleInputs\",\r\n        displayText: displayText,\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction toggleCollapse(): RegistryItem {\r\n    function displayText(scope: Scope): string {\r\n        const toggleType = scope.block.isCollapsed() ? \"Развернуть\" : \"Свернуть\";\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks.length === 1) {\r\n            return `${toggleType} блок`;\r\n        }\r\n\r\n        return `${toggleType} ${blocks.length} блоков`;\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const isCollapsed = !scope.block.isCollapsed();\r\n\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            blocks[i].setCollapsed(isCollapsed);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"toggleCollapse\",\r\n        displayText: displayText,\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction collapseAllBlocks(): RegistryItem {\r\n    function displayText(scope: Scope): string {\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks) {\r\n            if (blocks.length === 1) {\r\n                return \"Свернуть блок\";\r\n            }\r\n\r\n            return `Свернуть ${blocks.length} блоков`;\r\n        }\r\n\r\n        return \"Свернуть все блоки\";\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks) {\r\n            for (let i = 0; i < blocks.length; i++) {\r\n                blocks[i].setCollapsed(true);\r\n            }\r\n        } else {\r\n            const workspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n            for (const block of workspace.getAllBlocks(false)) {\r\n                block.setCollapsed(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"collapseAllBlocks\",\r\n        displayText: displayText,\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction expandAllBlocks(): RegistryItem {\r\n    function displayText(scope: Scope): string {\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks) {\r\n            if (blocks.length === 1) {\r\n                return \"Развернуть блок\";\r\n            }\r\n\r\n            return `Развернуть ${blocks.length} блоков`;\r\n        }\r\n\r\n        return \"Развернуть все блоки\";\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const blocks = getSelectedBlocks(scope);\r\n\r\n        if (blocks) {\r\n            for (let i = 0; i < blocks.length; i++) {\r\n                blocks[i].setCollapsed(false);\r\n            }\r\n        } else {\r\n            const workspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n            for (const block of workspace.getAllBlocks(false)) {\r\n                block.setCollapsed(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"expandAllBlocks\",\r\n        displayText: displayText,\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction deleteModBlock(): RegistryItem {\r\n    function precondition(scope: Scope): string {\r\n        if (\r\n            scope.block.type === \"modBlock\" &&\r\n            BlocklyWrapper.getMainWorkspace().getBlocksByType(\"modBlock\", false)\r\n                .length > 1\r\n        ) {\r\n            return \"enabled\";\r\n        }\r\n\r\n        return \"hidden\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        scope.block.dispose(false, false);\r\n    }\r\n\r\n    return {\r\n        id: \"deleteModBlock\",\r\n        displayText: \"Удалить MOD блок\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction openDocumentation(): RegistryItem {\r\n    const documentationUrl = \"https://docs.bfportal.gg/blocks\";\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(): void {\r\n        window.open(documentationUrl, \"bf2042_documentation\");\r\n    }\r\n\r\n    return {\r\n        id: \"openDocumentation\",\r\n        displayText: \"Открыть документацию\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction jumpToSubRoutine(): RegistryItem {\r\n    function precondition(scope: Scope): string {\r\n        if (scope.block.type === \"subroutineInstanceBlock\") {\r\n            return \"enabled\";\r\n        }\r\n\r\n        return \"hidden\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const subroutineName = scope.block.getFieldValue(\"SUBROUTINE_NAME\");\r\n\r\n        const foundBlocks = BlocklyWrapper.getMainWorkspace()\r\n            .getBlocksByType(\"subroutineBlock\", false)\r\n            .filter(\r\n                (e: Block) =>\r\n                    e.getFieldValue(\"SUBROUTINE_NAME\") === subroutineName,\r\n            );\r\n\r\n        if (foundBlocks.length > 0) {\r\n            BlocklyWrapper.getMainWorkspace().centerOnBlock(foundBlocks[0].id);\r\n        }\r\n    }\r\n\r\n    return {\r\n        id: \"jumpToSubRoutine\",\r\n        displayText: \"Перейти к подпрограмме\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction toggleDistractionFreeMode(): RegistryItem {\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(): void {\r\n        document.querySelector(\"app-root\").classList.toggle(\"distraction-free\");\r\n\r\n        BlocklyWrapper.getMainWorkspace().resize();\r\n    }\r\n\r\n    return {\r\n        id: \"toggleDistractionFreeMode\",\r\n        displayText: \"Переключить режим без отвлекающих элементов\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction toggleToolbox(): RegistryItem {\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(): void {\r\n        document.querySelector(\"app-root\").classList.toggle(\"hide-toolbox\");\r\n\r\n        BlocklyWrapper.getMainWorkspace().resize();\r\n    }\r\n\r\n    return {\r\n        id: \"toggleToolbox\",\r\n        displayText: \"Переключить панель инструментов\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction exportBlocksWorkspace(): RegistryItem {\r\n    return exportBlocks(\r\n        \"exportBlocksWorkspace\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n    );\r\n}\r\n\r\nfunction exportBlocksBlock(): RegistryItem {\r\n    return exportBlocks(\r\n        \"exportBlocksBlock\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n    );\r\n}\r\n\r\nfunction exportBlocks(id: string, scopeType: ScopeType): RegistryItem {\r\n    interface SvgData {\r\n        width: number;\r\n        height: number;\r\n        svgDataURL: string;\r\n    }\r\n\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const menuItems = [\r\n            {\r\n                text: \"XML\",\r\n                enabled: true,\r\n                callback: () => exportToXml(scope),\r\n            },\r\n            {\r\n                text: \"SVG\",\r\n                enabled: true,\r\n                callback: () => exportToSvg(scope),\r\n            },\r\n            {\r\n                text: \"PNG\",\r\n                enabled: true,\r\n                callback: () => exportToPngAsFile(scope),\r\n            },\r\n        ];\r\n\r\n        if (BF2042Portal.Shared.isCopyBlobToClipboardSupported()) {\r\n            menuItems.push({\r\n                text: \"PNG (Буфер обмена)\",\r\n                enabled: true,\r\n                callback: () => exportToPngOnClipboard(scope),\r\n            });\r\n        }\r\n\r\n        showContextMenuWithBack(menuItems);\r\n    }\r\n\r\n    async function exportToXml(scope: Scope): Promise<void> {\r\n        const blocks = getSelectedBlocks(scope);\r\n        const xmlText = saveXml(blocks);\r\n\r\n        if (!xmlText) {\r\n            alert(\"Не удалось экспортировать XML!\");\r\n\r\n            return;\r\n        }\r\n\r\n        const dataUri = `data:application/xml;charset=utf-8,${encodeURIComponent(\r\n            xmlText,\r\n        )}`;\r\n\r\n        downloadFile(dataUri, \"workspace.xml\");\r\n    }\r\n\r\n    async function exportToSvg(scope: Scope): Promise<void> {\r\n        const blocks = getSelectedBlocks(scope);\r\n        const svgData = await blocksToSvg(blocks, false);\r\n\r\n        downloadFile(svgData.svgDataURL, \"screenshot.svg\");\r\n    }\r\n\r\n    async function exportToPngAsFile(scope: Scope): Promise<void> {\r\n        try {\r\n            const blocks = getSelectedBlocks(scope);\r\n            const svgData = await blocksToSvg(blocks, true);\r\n            const pngData = (await svgToData(svgData, 1, \"png\")) as string;\r\n\r\n            downloadFile(pngData, \"screenshot.png\");\r\n        } catch (e) {\r\n            BF2042Portal.Shared.logError(\"Не удалось экспортировать PNG (загрузка)\", e);\r\n\r\n            alert(\"Не удалось экспортировать PNG (загрузка)!\");\r\n        }\r\n    }\r\n\r\n    async function exportToPngOnClipboard(scope: Scope): Promise<void> {\r\n        try {\r\n            const blocks = getSelectedBlocks(scope);\r\n            const svgData = await blocksToSvg(blocks, true);\r\n            const blobData = (await svgToData(svgData, 1, \"blob\")) as Blob;\r\n\r\n            await BF2042Portal.Shared.copyBlobToClipboard(blobData);\r\n\r\n            alert(\"Готово!\");\r\n        } catch (e) {\r\n            BF2042Portal.Shared.logError(\"Не удалось экспортировать PNG (буфер обмена)\", e);\r\n\r\n            alert(\"Не удалось экспортировать PNG (буфер обмена)!\");\r\n        }\r\n    }\r\n\r\n    //Based on: https://github.com/google/blockly/blob/master/tests/playgrounds/screenshot.js\r\n    async function blocksToSvg(\r\n        blocks: Array<BlockSvg>,\r\n        convertImagesToDataURI: boolean,\r\n    ): Promise<SvgData> {\r\n        const workspace = BlocklyWrapper.getMainWorkspace();\r\n        let x: number, y: number, width: number, height: number;\r\n\r\n        if (blocks && blocks.length > 0) {\r\n            //Determine bounding box of the selection\r\n            let minX, minY, maxX, maxY;\r\n\r\n            for (let i = 0; i < blocks.length; i++) {\r\n                const block = blocks[i];\r\n                const xy = block.getRelativeToSurfaceXY();\r\n\r\n                if (!minX || xy.x < minX) {\r\n                    minX = xy.x;\r\n                }\r\n\r\n                if (!minY || xy.y < minY) {\r\n                    minY = xy.y;\r\n                }\r\n\r\n                if (!maxX || xy.x + block.width > maxX) {\r\n                    maxX = xy.x + block.width;\r\n                }\r\n\r\n                if (!maxY || xy.y + block.height > maxY) {\r\n                    maxY = xy.y + block.height;\r\n                }\r\n            }\r\n\r\n            x = minX;\r\n            y = minY;\r\n            width = maxX - minX;\r\n            height = maxY - minY;\r\n        } else {\r\n            const boundingBox = workspace.getBlocksBoundingBox();\r\n            x = boundingBox.left;\r\n            y = boundingBox.top;\r\n            width = boundingBox.right - x;\r\n            height = boundingBox.bottom - y;\r\n        }\r\n\r\n        const blockCanvas = workspace.getCanvas();\r\n        const clone = blockCanvas.cloneNode(true) as SVGGElement;\r\n        clone.removeAttribute(\"transform\");\r\n\r\n        const svg = document.createElementNS(\r\n            \"http://www.w3.org/2000/svg\",\r\n            \"svg\",\r\n        );\r\n        svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n        svg.appendChild(clone);\r\n        svg.setAttribute(\"viewBox\", `${x} ${y} ${width} ${height}`);\r\n        svg.setAttribute(\r\n            \"class\",\r\n            `blocklySvg ${workspace.options.renderer || \"geras\"}-renderer ${\r\n                workspace.getTheme ? workspace.getTheme().name + \"-theme\" : \"\"\r\n            }`,\r\n        );\r\n        svg.setAttribute(\"width\", width.toString());\r\n        svg.setAttribute(\"height\", height.toString());\r\n        svg.setAttribute(\"style\", \"background-color: transparent\");\r\n\r\n        const css = [].slice\r\n            .call(document.head.querySelectorAll(\"style\"))\r\n            .filter(function (el: HTMLStyleElement) {\r\n                return (\r\n                    /\\.blocklySvg/.test(el.innerText) ||\r\n                    el.id.indexOf(\"blockly-\") === 0\r\n                );\r\n            })\r\n            .map(function (el: HTMLStyleElement) {\r\n                return el.innerText;\r\n            })\r\n            .join(\"\");\r\n\r\n        const style = document.createElement(\"style\");\r\n        style.innerHTML = css;\r\n        svg.insertBefore(style, svg.firstChild);\r\n\r\n        let svgAsXML = new XMLSerializer()\r\n            .serializeToString(svg)\r\n            .replace(/&nbsp/g, \"&#160\");\r\n\r\n        if (convertImagesToDataURI) {\r\n            const matches = [...svgAsXML.matchAll(/xlink:href=\"(.*?)\"/g)];\r\n\r\n            for (const match of matches) {\r\n                const url = match[1];\r\n\r\n                if (url.startsWith(\"data:\") || imageDataUrlCache.has(url)) {\r\n                    continue;\r\n                }\r\n\r\n                try {\r\n                    const dataUrl = await new Promise<string>(\r\n                        // eslint-disable-next-line no-async-promise-executor, @typescript-eslint/typedef\r\n                        async (resolve, reject) => {\r\n                            try {\r\n                                //TODO: Implement a time-out mechanism\r\n                                const response = await fetch(\r\n                                    \"https://portal.battlefield.com\" + url,\r\n                                );\r\n\r\n                                const blob = await response.blob();\r\n\r\n                                const reader = new FileReader();\r\n                                reader.onload = (\r\n                                    f: ProgressEvent<FileReader>,\r\n                                ): void => {\r\n                                    resolve(f.target.result as string);\r\n                                };\r\n                                reader.readAsDataURL(blob);\r\n                            } catch (_) {\r\n                                reject();\r\n                            }\r\n                        },\r\n                    );\r\n\r\n                    imageDataUrlCache.set(url, dataUrl);\r\n                } catch (_) {\r\n                    imageDataUrlCache.set(url, url);\r\n                }\r\n            }\r\n        }\r\n\r\n        svgAsXML = svgAsXML.replace(\r\n            /xlink:href=\"(.*?)\"/g,\r\n            function (_: string, url: string) {\r\n                const newUrl = imageDataUrlCache.has(url)\r\n                    ? imageDataUrlCache.get(url)\r\n                    : url;\r\n\r\n                return `xlink:href=\"${newUrl}\"`;\r\n            },\r\n        );\r\n\r\n        const data = `data:image/svg+xml,${encodeURIComponent(svgAsXML)}`;\r\n\r\n        return {\r\n            width: width,\r\n            height: height,\r\n            svgDataURL: data,\r\n        };\r\n    }\r\n\r\n    async function svgToData(\r\n        svgData: SvgData,\r\n        scale: number,\r\n        dataType: string,\r\n    ): Promise<string | Blob> {\r\n        // eslint-disable-next-line @typescript-eslint/typedef\r\n        const promise = new Promise<string | Blob>((resolve, reject) => {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const context = canvas.getContext(\"2d\");\r\n            const img = new Image();\r\n\r\n            canvas.width = svgData.width * scale;\r\n            canvas.height = svgData.height * scale;\r\n\r\n            if (canvas.width > 16384 || canvas.height > 16384) {\r\n                reject(\r\n                    \"The resulting image would be too large to handle for your browser. Please select less blocks or reduce the scale.\",\r\n                );\r\n            }\r\n\r\n            img.onload = function (): void {\r\n                context.drawImage(\r\n                    img,\r\n                    0,\r\n                    0,\r\n                    svgData.width,\r\n                    svgData.height,\r\n                    0,\r\n                    0,\r\n                    canvas.width,\r\n                    canvas.height,\r\n                );\r\n\r\n                try {\r\n                    if (dataType === \"png\") {\r\n                        const dataUri = canvas.toDataURL(\"image/png\");\r\n\r\n                        resolve(dataUri);\r\n                    } else if (dataType === \"blob\") {\r\n                        canvas.toBlob(function (blob: Blob): void {\r\n                            resolve(blob);\r\n                        });\r\n                    } else {\r\n                        throw \"Unknown type\";\r\n                    }\r\n                } catch (e) {\r\n                    reject(`Не удалось конвертировать SVG: ${e}`);\r\n                }\r\n            };\r\n\r\n            img.src = svgData.svgDataURL;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    function downloadFile(fileData: string, fileName: string): void {\r\n        const linkElement = document.createElement(\"a\");\r\n        linkElement.setAttribute(\"href\", fileData);\r\n        linkElement.setAttribute(\"download\", fileName);\r\n        linkElement.style.display = \"none\";\r\n\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n    }\r\n\r\n    return {\r\n        id: id,\r\n        displayText: \"Экспорт блоков >\",\r\n        scopeType: scopeType,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction importBlocksFromFile(): RegistryItem {\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(): void {\r\n        const inputElement = document.createElement(\"input\");\r\n        inputElement.setAttribute(\"type\", \"file\");\r\n        inputElement.setAttribute(\"accept\", \".xml,.json\");\r\n        inputElement.style.display = \"none\";\r\n\r\n        inputElement.addEventListener(\"change\", function () {\r\n            if (!inputElement.files || inputElement.files.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = function (e: ProgressEvent<FileReader>): void {\r\n                if (\r\n                    confirm(\r\n                        \"Вы хотите удалить все существующие блоки перед импортом?\",\r\n                    )\r\n                ) {\r\n                    BlocklyWrapper.getMainWorkspace().clear();\r\n                }\r\n\r\n                try {\r\n                    const extension = inputElement.files[0].name\r\n                        .split(\".\")\r\n                        .pop()\r\n                        .toLowerCase();\r\n\r\n                    if (extension === \"json\") {\r\n                        const loadData = JSON.parse(e.target.result as string);\r\n\r\n                        if (!loadJson(loadData)) {\r\n                            alert(\"Не удалось импортировать рабочую область из JSON!\");\r\n                        }\r\n                    } else if (extension === \"xml\") {\r\n                        if (!loadXml(e.target.result as string)) {\r\n                            alert(\"Не удалось импортировать рабочую область из XML!\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    alert(\"Не удалось импортировать рабочую область!\");\r\n                }\r\n            };\r\n\r\n            fileReader.readAsText(inputElement.files[0]);\r\n        });\r\n\r\n        document.body.appendChild(inputElement);\r\n        inputElement.click();\r\n        document.body.removeChild(inputElement);\r\n    }\r\n\r\n    return {\r\n        id: \"importBlocksFromFile\",\r\n        displayText: \"Импорт блоков из файла\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction addBlock(): RegistryItem {\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    //TODO: Variables/Subroutines\r\n    function callback(): void {\r\n        const options: Array<MenuOption> = [];\r\n\r\n        for (let i = 0; i < blockCategories.length; i++) {\r\n            const entry = blockCategories[i];\r\n\r\n            options.push({\r\n                text: entry.displayName,\r\n                enabled: true,\r\n                callback: function () {\r\n                    const subOptions: Array<MenuOption> = [];\r\n\r\n                    for (let i2 = 0; i2 < entry.contents.length; i2++) {\r\n                        const entry2 = entry.contents[i2];\r\n\r\n                        let role;\r\n\r\n                        switch (entry2.type) {\r\n                            case \"mod\":\r\n                                role = \"⚫\";\r\n                                break;\r\n\r\n                            case \"rule\":\r\n                            case \"controlAction\":\r\n                                role = \"🟣\";\r\n                                break;\r\n\r\n                            case \"condition\":\r\n                                role = \"🔵\";\r\n                                break;\r\n\r\n                            case \"value\":\r\n                            case \"literal\":\r\n                                role = \"🟢\";\r\n                                break;\r\n\r\n                            case \"action\":\r\n                                role = \"🟡\";\r\n                                break;\r\n\r\n                            default:\r\n                                role = \"⚪\";\r\n                                break;\r\n                        }\r\n\r\n                        subOptions.push({\r\n                            text: `${role} ${entry2.displayName}`,\r\n                            enabled: true,\r\n                            callback: function () {\r\n                                const block =\r\n                                    BlocklyWrapper.getMainWorkspace().newBlock(\r\n                                        entry2.internalName,\r\n                                    );\r\n                                block.initSvg();\r\n                                block.render();\r\n\r\n                                //NOTE: Deliberately cast to Coordinate\r\n                                block.moveTo(mouseCoords as Coordinate);\r\n                            },\r\n                        });\r\n                    }\r\n\r\n                    showContextMenuWithBack(subOptions.sort(sortByText));\r\n                },\r\n            });\r\n        }\r\n\r\n        showContextMenuWithBack(options.sort(sortByText));\r\n    }\r\n\r\n    function sortByText(a: MenuOption, b: MenuOption): number {\r\n        return a.text > b.text ? 1 : -1;\r\n    }\r\n\r\n    return {\r\n        id: \"addBlock\",\r\n        displayText: \"Добавить блок >\",\r\n        scopeType: BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n    };\r\n}\r\n\r\nfunction separatorWorkspace(): RegistryItem {\r\n    return separator(\r\n        \"separatorWorkspace\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n    );\r\n}\r\n\r\nfunction separatorBlock(): RegistryItem {\r\n    return separator(\r\n        \"separatorBlock\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n    );\r\n}\r\n\r\nfunction separator(id: string, scope: ScopeType): RegistryItem {\r\n    return {\r\n        id: id,\r\n        displayText: \"---\",\r\n        scopeType: scope,\r\n        weight: 100,\r\n        preconditionFn: () => \"disabled\",\r\n        callback: (): void => {\r\n            //Do nothing\r\n        },\r\n    };\r\n}\r\n\r\n//Blockly functions - Menus\r\nfunction optionsWorkspace(): RegistryMenuItem {\r\n    return createMenu(\r\n        \"optionsWorkspace\",\r\n        \"Опции\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.WORKSPACE,\r\n    );\r\n}\r\n\r\nfunction optionsBlock(): RegistryMenuItem {\r\n    return createMenu(\r\n        \"optionsBlock\",\r\n        \"Опции\",\r\n        BlocklyWrapper.ContextMenu.ScopeType.BLOCK,\r\n    );\r\n}\r\n\r\nfunction createMenu(\r\n    id: string,\r\n    name: string,\r\n    scopeType: ScopeType,\r\n): RegistryMenuItem {\r\n    function precondition(): string {\r\n        return \"enabled\";\r\n    }\r\n\r\n    function callback(scope: Scope): void {\r\n        const menu = blocklyConfig.menus[id];\r\n        const subMenuOptions: Array<MenuOption> = [];\r\n\r\n        for (let i = 0; i < menu.options.length; i++) {\r\n            const subMenuItem = createSubMenuItem(\r\n                menu.options[i],\r\n                scopeType,\r\n                scope,\r\n            );\r\n\r\n            if (!subMenuItem) {\r\n                continue;\r\n            }\r\n\r\n            subMenuOptions.push(subMenuItem);\r\n        }\r\n\r\n        showContextMenuWithBack(subMenuOptions);\r\n    }\r\n\r\n    return {\r\n        id: id,\r\n        displayText: `${name} >`,\r\n        scopeType: scopeType,\r\n        weight: 100,\r\n        preconditionFn: precondition,\r\n        callback: callback,\r\n        options: [],\r\n    };\r\n}\r\n\r\nfunction createSubMenuItem(\r\n    id: string,\r\n    scopeType: ScopeType,\r\n    scope: Scope,\r\n): MenuOption {\r\n    let data: RegistryItem | RegistryMenuItem;\r\n\r\n    if (id.startsWith(\"items.\")) {\r\n        data = blocklyConfig.items[id.substring(\"items.\".length)];\r\n    } else if (id.startsWith(\"menus.\")) {\r\n        data = blocklyConfig.menus[id.substring(\"menus.\".length)];\r\n    }\r\n\r\n    if (!data || data.scopeType !== scopeType) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        text:\r\n            typeof data.displayText === \"string\"\r\n                ? data.displayText\r\n                : data.displayText(scope),\r\n        enabled: data.preconditionFn(scope) === \"enabled\",\r\n        callback: () => data.callback(scope),\r\n    };\r\n}\r\n\r\n//Blockly functions - Helpers\r\nfunction registerMenu(menu: RegistryMenuItem): void {\r\n    blocklyConfig.menus[menu.id] = menu;\r\n}\r\n\r\nfunction registerItem(item: RegistryItem): void {\r\n    blocklyConfig.items[item.id] = item;\r\n}\r\n\r\n//Private functions\r\nfunction saveXml(blocks: Array<BlockSvg>): string {\r\n    const workspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n    try {\r\n        let xmlText = \"\";\r\n\r\n        if (blocks && blocks.length > 0) {\r\n            for (let i = 0; i < blocks.length; i++) {\r\n                xmlText += BlocklyWrapper.Xml.blockToXml(blocks[i]);\r\n            }\r\n\r\n            return xmlText;\r\n        } else {\r\n            const xmlDom = BlocklyWrapper.Xml.workspaceToDom(workspace, true);\r\n\r\n            const variablesXml = xmlDom.querySelector(\"variables\");\r\n\r\n            if (variablesXml) {\r\n                xmlDom.removeChild(variablesXml);\r\n            }\r\n\r\n            return BlocklyWrapper.Xml.domToText(xmlDom)\r\n                .replace(\r\n                    '<xml xmlns=\"https://developers.google.com/blockly/xml\">',\r\n                    \"\",\r\n                )\r\n                .replace(\"</xml>\", \"\");\r\n        }\r\n    } catch (e) {\r\n        BF2042Portal.Shared.logError(\"Не удалось сохранить рабочую область!\", e);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction loadJson(data: JsonWorkspaceFile): boolean {\r\n    const workspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n    try {\r\n        const variables = BlocklyWrapper.Xml.textToDom(\r\n            data.variables ? data.variables : \"<xml />\",\r\n        );\r\n\r\n        BlocklyWrapper.Xml.domToVariables(variables, workspace);\r\n        BlocklyWrapper.Xml.domToWorkspace(\r\n            BlocklyWrapper.Xml.textToDom(data.mainWorkspace),\r\n            workspace,\r\n        );\r\n\r\n        return true;\r\n    } catch (e) {\r\n        BF2042Portal.Shared.logError(\"Не удалось загрузить рабочую область из JSON!\", e);\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction loadXml(xmlText: string): boolean {\r\n    try {\r\n        if (!xmlText) {\r\n            return false;\r\n        }\r\n\r\n        xmlText = xmlText.trim();\r\n\r\n        if (!xmlText.startsWith(\"<block\")) {\r\n            return false;\r\n        }\r\n\r\n        const domText = `<xml xmlns=\"https://developers.google.com/blockly/xml\">${xmlText.trim()}</xml>`;\r\n\r\n        const xmlDom = BlocklyWrapper.Xml.textToDom(domText);\r\n\r\n        //NOTE: Extract variables\r\n        const variableBlocks = xmlDom.querySelectorAll(\r\n            \"block[type='variableReferenceBlock']\",\r\n        );\r\n\r\n        interface Variable {\r\n            objectType: string;\r\n            variableName: string;\r\n        }\r\n\r\n        const variables: Array<Variable> = [];\r\n\r\n        variableBlocks.forEach((e: Element) => {\r\n            const objectType = e.querySelector(\r\n                \"field[name='OBJECTTYPE']\",\r\n            ).textContent;\r\n            const variableName =\r\n                e.querySelector(\"field[name='VAR']\").textContent;\r\n\r\n            if (\r\n                objectType &&\r\n                variableName &&\r\n                !variables.find(\r\n                    (v: Variable) =>\r\n                        v.objectType === objectType &&\r\n                        v.variableName === variableName,\r\n                )\r\n            ) {\r\n                variables.push({\r\n                    objectType,\r\n                    variableName,\r\n                });\r\n            }\r\n        });\r\n\r\n        const variablesXml = document.createElement(\"variables\");\r\n\r\n        variables.forEach((e: Variable) => {\r\n            const variable = document.createElement(\"variable\");\r\n            variable.setAttribute(\"type\", e.objectType);\r\n            variable.innerText = e.variableName;\r\n\r\n            variablesXml.appendChild(variable);\r\n        });\r\n\r\n        BlocklyWrapper.Xml.domToVariables(\r\n            variablesXml,\r\n            BlocklyWrapper.getMainWorkspace(),\r\n        );\r\n\r\n        //NOTE: Determine a bounding box\r\n        let minX: number;\r\n        let minY: number;\r\n\r\n        for (let i = 0; i < xmlDom.childNodes.length; i++) {\r\n            const block = xmlDom.childNodes[i] as Element;\r\n\r\n            const x = parseInt(block.getAttribute(\"x\"));\r\n            const y = parseInt(block.getAttribute(\"y\"));\r\n\r\n            if (!minX || x < minX) {\r\n                minX = x;\r\n            }\r\n\r\n            if (!minY || y < minY) {\r\n                minY = y;\r\n            }\r\n        }\r\n\r\n        //NOTE: Transform blocks to the minimum coords, then move them to their target position.\r\n        for (let i = 0; i < xmlDom.childNodes.length; i++) {\r\n            const block = xmlDom.childNodes[i] as Element;\r\n\r\n            const x = parseInt(block.getAttribute(\"x\"));\r\n            const y = parseInt(block.getAttribute(\"y\"));\r\n\r\n            if (x === minX) {\r\n                block.setAttribute(\"x\", mouseCoords.x.toString());\r\n            } else {\r\n                block.setAttribute(\"x\", (x - minX + mouseCoords.x).toString());\r\n            }\r\n\r\n            if (y === minY) {\r\n                block.setAttribute(\"y\", mouseCoords.y.toString());\r\n            } else {\r\n                block.setAttribute(\"y\", (y - minY + mouseCoords.y).toString());\r\n            }\r\n        }\r\n\r\n        BlocklyWrapper.Xml.domToWorkspace(\r\n            xmlDom,\r\n            BlocklyWrapper.getMainWorkspace(),\r\n        );\r\n\r\n        return true;\r\n    } catch (e) {\r\n        BF2042Portal.Shared.logError(\"Не удалось загрузить рабочую область из XML!\", e);\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n//Based on: https://stackoverflow.com/questions/32589197/how-can-i-capitalize-the-first-letter-of-each-word-in-a-string-using-javascript\r\nfunction titleCase(value: string): string {\r\n    return value\r\n        .split(\" \")\r\n        .map(\r\n            (s: string) =>\r\n                s.charAt(0).toUpperCase() + s.substring(1).toLowerCase(),\r\n        )\r\n        .join(\" \");\r\n}\r\n\r\n//API functions\r\nfunction getSelectedBlocks(scope: Scope): Array<BlockSvg> {\r\n    let blocks = undefined;\r\n\r\n    if (selectedBlocks.length > 0) {\r\n        blocks = selectedBlocks;\r\n    }\r\n\r\n    if (\r\n        !blocks &&\r\n        (BlocklyWrapper.Blocks.getSelected() ||\r\n            (scope !== undefined && scope.block))\r\n    ) {\r\n        blocks = [BlocklyWrapper.Blocks.getSelected() || scope.block];\r\n    }\r\n\r\n    return blocks;\r\n}\r\n\r\nfunction getMouseCoords(): MouseCoords {\r\n    return {\r\n        x: mouseCoords.x,\r\n        y: mouseCoords.y,\r\n    };\r\n}\r\n\r\nfunction showContextMenuWithBack(options: Array<MenuOption>): void {\r\n    contextMenuStack.push(lastContextMenu.options);\r\n\r\n    BlocklyWrapper.ContextMenu.show(\r\n        lastContextMenu.e,\r\n        []\r\n            .concat(\r\n                {\r\n                    text: \"< Назад\",\r\n                    enabled: true,\r\n                    callback: () => {\r\n                        const menu = contextMenuStack.splice(\r\n                            contextMenuStack.length - 1,\r\n                            1,\r\n                        );\r\n\r\n                        //NOTE: Deliberately cast to ContextMenuOption\r\n                        BlocklyWrapper.ContextMenu.show(\r\n                            lastContextMenu.e,\r\n                            menu[0] as unknown as Array<ContextMenuOption>,\r\n                            lastContextMenu.rtl,\r\n                        );\r\n                    },\r\n                },\r\n                {\r\n                    text: \"---\",\r\n                    enabled: false,\r\n                    callback: () => {\r\n                        //Do nothing\r\n                    },\r\n                },\r\n            )\r\n            .concat(options),\r\n        lastContextMenu.rtl,\r\n    );\r\n}\r\n\r\nexport interface PluginApi {\r\n    getSelectedBlocks: typeof getSelectedBlocks;\r\n    getMouseCoords: typeof getMouseCoords;\r\n    showContextMenuWithBack: typeof showContextMenuWithBack;\r\n    registerMenu: typeof registerMenu;\r\n    registerItem: typeof registerItem;\r\n    createMenu: typeof createMenu;\r\n}\r\n\r\n//Initialize functions\r\nexport function init(): void {\r\n    cssFixes();\r\n\r\n    hookContextMenu();\r\n    hookBlockly();\r\n\r\n    initializeBlocks(BF2042Portal.Startup.getBlockDefinitions());\r\n    initializeDocumentEvents();\r\n    initializeBlockly();\r\n\r\n    pluginInit({\r\n        api: {\r\n            getSelectedBlocks: getSelectedBlocks,\r\n            getMouseCoords: getMouseCoords,\r\n            showContextMenuWithBack: showContextMenuWithBack,\r\n            registerMenu: registerMenu,\r\n            registerItem: registerItem,\r\n            createMenu: createMenu,\r\n        },\r\n        version: BF2042Portal.Startup.getVersion(),\r\n        pluginManager: BF2042Portal.Startup.getManifest().pluginManager,\r\n    });\r\n}\r\n\r\nfunction cssFixes(): void {\r\n    const styleElement = document.createElement(\"style\");\r\n    styleElement.setAttribute(\"type\", \"text/css\");\r\n\r\n    styleElement.innerHTML = `\r\n        /*.blocklyMenu {\r\n            overflow-y: hidden !important;\r\n        }*/\r\n\r\n        .distraction-free ea-network-nav, .distraction-free ea-local-nav-advanced {\r\n            display: none;\r\n        }\r\n\r\n        .distraction-free > div.app {\r\n            padding-top: 0;\r\n        }\r\n\r\n        .distraction-free .editor-container {\r\n            grid-template-columns: 0 !important;\r\n        }\r\n\r\n        .hide-toolbox .blocklyToolboxDiv {\r\n            display: none !important;\r\n        }\r\n    `;\r\n\r\n    document.head.appendChild(styleElement);\r\n}\r\n\r\nfunction hookContextMenu(): void {\r\n    const workspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n    const workspacePrototype: WorkspaceSvg = Object.getPrototypeOf(workspace);\r\n    const originalWorkspaceShowContextMenu = workspacePrototype.showContextMenu;\r\n\r\n    workspacePrototype.showContextMenu = function (e: MouseEvent): void {\r\n        //NOTE: Clear the stack every time the content menu is opened at the root\r\n        contextMenuStack.length = 0;\r\n\r\n        //NOTE: Deliberately cast to MenuOption, since only a subset of properties is required.\r\n        lastContextMenu = {\r\n            e: e,\r\n            options: BlocklyWrapper.ContextMenu.getOptionsForWorkspace(\r\n                this,\r\n            ) as unknown as Array<MenuOption>,\r\n            rtl: this.RTL,\r\n        };\r\n\r\n        updateMouseCoords(e);\r\n\r\n        // eslint-disable-next-line prefer-rest-params\r\n        originalWorkspaceShowContextMenu.apply(this, arguments);\r\n    };\r\n\r\n    const blockPrototype: BlockSvg = Object.getPrototypeOf(\r\n        workspace.getTopBlocks(false)[0],\r\n    );\r\n    const originalBlockShowContextMenu = blockPrototype.showContextMenu;\r\n\r\n    blockPrototype.showContextMenu = function (e: MouseEvent): void {\r\n        //NOTE: Clear the stack every time the content menu is opened at the root\r\n        contextMenuStack.length = 0;\r\n\r\n        //NOTE: Deliberately cast to MenuOption, since only a subset of properties is required.\r\n        lastContextMenu = {\r\n            e: e,\r\n            options: BlocklyWrapper.ContextMenu.getOptionsForBlock(\r\n                this,\r\n            ) as unknown as Array<MenuOption>,\r\n            rtl: this.RTL,\r\n        };\r\n\r\n        updateMouseCoords(e);\r\n\r\n        // eslint-disable-next-line prefer-rest-params\r\n        return originalBlockShowContextMenu.apply(this, arguments);\r\n    };\r\n\r\n    const originalShow = _Blockly.ContextMenu.show;\r\n\r\n    _Blockly.ContextMenu.show = function (\r\n        e: MouseEvent,\r\n        options: Array<ContextMenuOption>,\r\n        rtl: boolean,\r\n    ): void {\r\n        //NOTE: Deliberately cast to MenuOption, since only a subset of properties is required.\r\n        lastContextMenu = {\r\n            e: e,\r\n            options: options as unknown as Array<MenuOption>,\r\n            rtl: rtl,\r\n        };\r\n\r\n        updateMouseCoords(e);\r\n\r\n        // eslint-disable-next-line prefer-rest-params\r\n        originalShow.apply(this, arguments);\r\n    };\r\n}\r\n\r\nfunction hookBlockly(): void {\r\n    function initializeWorkspace(workspace: WorkspaceSvg): void {\r\n        //TODO: Properly migrate to JSON instead of XML\r\n        hotfixDomMutations();\r\n\r\n        initializeWorkspaceEvents(workspace);\r\n\r\n        //NOTE: Wait for the current JavaScript frame to end, then fire the event for plugins.\r\n        setTimeout(function () {\r\n            BF2042Portal.Plugins.initializeWorkspace();\r\n        }, 0);\r\n    }\r\n\r\n    //NOTE: We have to hook the inject method as it's called whenever the user switches to the Rules Editor.\r\n    const blockly = _Blockly.inject;\r\n\r\n    _Blockly.inject = function (): WorkspaceSvg {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const workspace = blockly.apply(this, arguments);\r\n\r\n        initializeWorkspace(workspace);\r\n\r\n        return workspace;\r\n    };\r\n\r\n    initializeWorkspace(BlocklyWrapper.getMainWorkspace());\r\n}\r\n\r\nfunction initializeDocumentEvents(): void {\r\n    document.addEventListener(\"keydown\", function (e: KeyboardEvent) {\r\n        shiftKey = e.shiftKey;\r\n    });\r\n\r\n    document.addEventListener(\"keyup\", function (e: KeyboardEvent) {\r\n        shiftKey = e.shiftKey;\r\n    });\r\n}\r\n\r\nfunction initializeBlockly(): void {\r\n    //NOTE: Register existing items\r\n    for (const contentMenuItem of BlocklyWrapper.ContextMenu.getAllItems()) {\r\n        registerItem(contentMenuItem.value);\r\n    }\r\n\r\n    //NOTE: Delete existing items\r\n    BlocklyWrapper.ContextMenu.unregisterItem(\"cleanWorkspace\");\r\n    BlocklyWrapper.ContextMenu.unregisterItem(\"workspaceDelete\");\r\n\r\n    const optionsWorkspaceMenu = optionsWorkspace();\r\n    optionsWorkspaceMenu.weight = -99;\r\n    optionsWorkspaceMenu.options = [\r\n        \"items.workspaceDelete\",\r\n        \"items.separatorWorkspace\",\r\n        \"items.collapseAllBlocks\",\r\n        \"items.expandAllBlocks\",\r\n        \"items.openDocumentation\",\r\n        \"items.toggleDistractionFreeMode\",\r\n        \"items.toggleToolbox\",\r\n        \"items.separatorWorkspace\",\r\n        \"items.exportBlocksWorkspace\",\r\n        \"items.importBlocksFromFile\",\r\n    ];\r\n\r\n    const optionsBlockMenu = optionsBlock();\r\n    optionsBlockMenu.weight = -99;\r\n    optionsBlockMenu.options = [\r\n        \"items.deleteModBlock\",\r\n        \"items.separatorBlock\",\r\n        \"items.toggleComments\",\r\n        \"items.toggleInputs\",\r\n        \"items.toggleCollapse\",\r\n        \"items.separatorBlock\",\r\n        \"items.exportBlocksBlock\",\r\n    ];\r\n\r\n    registerMenu(optionsWorkspaceMenu);\r\n    registerMenu(optionsBlockMenu);\r\n\r\n    registerItem(copyToClipboard());\r\n    registerItem(pasteFromClipboard());\r\n    registerItem(toggleComments());\r\n    registerItem(toggleInputs());\r\n    registerItem(toggleCollapse());\r\n    registerItem(collapseAllBlocks());\r\n    registerItem(expandAllBlocks());\r\n    registerItem(deleteModBlock());\r\n    registerItem(openDocumentation());\r\n    registerItem(jumpToSubRoutine());\r\n    registerItem(toggleDistractionFreeMode());\r\n    registerItem(toggleToolbox());\r\n    registerItem(exportBlocksWorkspace());\r\n    registerItem(exportBlocksBlock());\r\n    registerItem(importBlocksFromFile());\r\n    registerItem(separatorWorkspace());\r\n    registerItem(separatorBlock());\r\n\r\n    const addBlockMenuItem = addBlock();\r\n    addBlockMenuItem.weight = -100;\r\n\r\n    registerItem(addBlockMenuItem);\r\n\r\n    const contextMenuStructure = [\r\n        \"items.addBlock\",\r\n        \"menus.optionsWorkspace\",\r\n        \"menus.optionsBlock\",\r\n        \"items.cleanWorkspace\",\r\n        \"items.jumpToSubRoutine\",\r\n        \"items.copyToClipboard\",\r\n        \"items.pasteFromClipboard\",\r\n    ];\r\n\r\n    //TODO: Give plugins a chance to modify this\r\n\r\n    contextMenuStructure.forEach(function (item: string) {\r\n        let menuItem;\r\n\r\n        if (item.startsWith(\"items.\")) {\r\n            const itemId = item.substring(\"items.\".length);\r\n            menuItem = blocklyConfig.items[itemId];\r\n        } else if (item.startsWith(\"menus.\")) {\r\n            const menuId = item.substring(\"menus.\".length);\r\n            menuItem = blocklyConfig.menus[menuId];\r\n        }\r\n\r\n        if (!menuItem) {\r\n            return;\r\n        }\r\n\r\n        BlocklyWrapper.ContextMenu.registerItem(menuItem);\r\n    });\r\n}\r\n\r\n//Internal functions\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction initializeBlocks(blockDefinitions: any): void {\r\n    //Blocks - Hard-coded\r\n    blockLookup.push({\r\n        type: \"mod\",\r\n        category: getCategory(\"RULES\"),\r\n        internalName: \"modBlock\",\r\n        displayName: titleCase(BlocklyWrapper.getTranslation(\"PYRITE_MOD\")),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"rule\",\r\n        category: getCategory(\"RULES\"),\r\n        internalName: \"ruleBlock\",\r\n        displayName: titleCase(BlocklyWrapper.getTranslation(\"PYRITE_RULE\")),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"condition\",\r\n        category: getCategory(\"RULES\"),\r\n        internalName: \"conditionBlock\",\r\n        displayName: titleCase(\r\n            BlocklyWrapper.getTranslation(\"PYRITE_CONDITION\"),\r\n        ),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"literal\",\r\n        category: getCategory(\"LITERALS\"),\r\n        internalName: \"Boolean\",\r\n        displayName: BlocklyWrapper.getTranslation(\"PYRITE_TYPE_BOOLEAN\"),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"literal\",\r\n        category: getCategory(\"LITERALS\"),\r\n        internalName: \"Number\",\r\n        displayName: BlocklyWrapper.getTranslation(\"PYRITE_TYPE_NUMBER\"),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"literal\",\r\n        category: getCategory(\"LITERALS\"),\r\n        internalName: \"Text\",\r\n        displayName: BlocklyWrapper.getTranslation(\"PYRITE_TYPE_STRING\"),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"value\",\r\n        category: getCategory(\"ARRAYS\"),\r\n        internalName: \"ArrayContains\",\r\n        displayName: BlocklyWrapper.getTranslation(\r\n            \"PYRITE_CONVENIENCE_ARRAYCONTAINS\",\r\n        ),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"value\",\r\n        category: getCategory(\"ARRAYS\"),\r\n        internalName: \"IndexOfArrayValue\",\r\n        displayName: BlocklyWrapper.getTranslation(\r\n            \"PYRITE_CONVENIENCE_INDEXOFARRAYVALUE\",\r\n        ),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"value\",\r\n        category: getCategory(\"ARRAYS\"),\r\n        internalName: \"RemoveFromArray\",\r\n        displayName: BlocklyWrapper.getTranslation(\r\n            \"PYRITE_CONVENIENCE_REMOVEFROMARRAY\",\r\n        ),\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"value\",\r\n        category: getCategory(\"SUBROUTINES\"),\r\n        internalName: \"subroutineArgumentBlock\",\r\n        displayName: \"GetSubroutineArgument\"\r\n    });\r\n\r\n    blockLookup.push({\r\n        type: \"action\",\r\n        category: getCategory(\"CONVENIENCE\"),\r\n        internalName: \"actionComment\",\r\n        displayName: \"Comment\"\r\n    });\r\n\r\n    //Blocks - Selection Lists\r\n    const selectionLists = [\r\n        ...new Set(\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            blockDefinitions.selectionLists.map(\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                (e: any) => e.listType + \"Item\",\r\n            ),\r\n        ),\r\n    ];\r\n\r\n    //Blocks - Values (Yellow)\r\n    const ignoreValueBlocks = [\r\n        \"GetArgument\"\r\n    ];\r\n\r\n    for (let index = 0; index < blockDefinitions.values.length; index++) {\r\n        const element = blockDefinitions.values[index];\r\n\r\n        //NOTE: Some values have no category...\r\n        if (!element.category) {\r\n            if (ignoreValueBlocks.includes(element.name)) {\r\n                continue;\r\n            }\r\n\r\n            if (element.name === \"GetVariable\") {\r\n                element.category = \"VARIABLES\";\r\n            } else if (selectionLists.includes(element.name)) {\r\n                element.category = \"SELECTION_LISTS\";\r\n            } else {\r\n                BF2042Portal.Shared.logError(\r\n                    \"No category found for value-block\",\r\n                    element,\r\n                );\r\n            }\r\n        }\r\n\r\n        blockLookup.push({\r\n            type: \"value\",\r\n            category: getCategory(element.category),\r\n            internalName: element.name,\r\n            displayName:\r\n                BlocklyWrapper.getTranslation(element.displayNameSID) ||\r\n                element.name,\r\n        });\r\n    }\r\n\r\n    //Blocks - Actions (Green)\r\n    for (let index = 0; index < blockDefinitions.actions.length; index++) {\r\n        const element = blockDefinitions.actions[index];\r\n\r\n        //NOTE: Some values have no category...\r\n        if (!element.category) {\r\n            if (element.name === \"SetVariable\") {\r\n                element.category = \"VARIABLES\";\r\n            } else {\r\n                BF2042Portal.Shared.logError(\r\n                    \"No category found for action-block\",\r\n                    element,\r\n                );\r\n            }\r\n        }\r\n\r\n        blockLookup.push({\r\n            type: \"action\",\r\n            category: getCategory(element.category),\r\n            internalName: element.name,\r\n            displayName:\r\n                BlocklyWrapper.getTranslation(element.displayNameSID) ||\r\n                element.name,\r\n        });\r\n    }\r\n\r\n    //Blocks - Controls Actions\r\n    for (\r\n        let index = 0;\r\n        index < blockDefinitions.controlActions.length;\r\n        index++\r\n    ) {\r\n        const element = blockDefinitions.controlActions[index];\r\n\r\n        blockLookup.push({\r\n            type: \"controlAction\",\r\n            category: getCategory(\"CONTROL_ACTIONS\"),\r\n            internalName: element.name,\r\n            displayName:\r\n                BlocklyWrapper.getTranslation(element.displayNameSID) ||\r\n                element.name,\r\n        });\r\n    }\r\n\r\n    //Categories\r\n    blockLookup.forEach((entry: BlockLookup) => {\r\n        const existingCategory = blockCategories.find(\r\n            (e: BlockCategory) =>\r\n                e.internalName === (entry.category || \"Other\"),\r\n        );\r\n\r\n        if (existingCategory) {\r\n            existingCategory.contents.push(entry);\r\n        } else {\r\n            blockCategories.push({\r\n                internalName: entry.category || \"Other\",\r\n                displayName: titleCase(entry.category || \"Other\"),\r\n                contents: [entry],\r\n            });\r\n        }\r\n    });\r\n\r\n    function getCategory(key: string): string {\r\n        if (!key) {\r\n            return undefined;\r\n        }\r\n\r\n        return BlocklyWrapper.getTranslation(\r\n            \"PYRITE_TOOLBOX_\" + key.replace(\" \", \"_\").toUpperCase(),\r\n        );\r\n    }\r\n}\r\n\r\nfunction initializeWorkspaceEvents(workspace: WorkspaceSvg): void {\r\n    let deltaX;\r\n    let deltaY;\r\n    let activeBlock: string;\r\n\r\n    //NOTE: Yes, this is cheating.\r\n    type SuperEvent = Click & Selected & BlockDrag & BlockMove;\r\n\r\n    workspace.addChangeListener(function (e: SuperEvent) {\r\n        if (\r\n            e.type === BlocklyWrapper.Events.CLICK ||\r\n            e.type === BlocklyWrapper.Events.SELECTED\r\n        ) {\r\n            if (shiftKey) {\r\n                if (!e.blockId) {\r\n                    return;\r\n                }\r\n\r\n                const block = workspace.getBlockById(e.blockId);\r\n\r\n                const selectedIndex = selectedBlocks.indexOf(block);\r\n\r\n                if (selectedIndex < 0) {\r\n                    selectedBlocks.push(block);\r\n\r\n                    block.setHighlighted(true);\r\n                } else {\r\n                    selectedBlocks.splice(selectedIndex, 1);\r\n\r\n                    block.setHighlighted(false);\r\n                }\r\n            } else if (selectedBlocks.length > 0) {\r\n                selectedBlocks.forEach((block: BlockSvg) => {\r\n                    block.setHighlighted(false);\r\n                });\r\n\r\n                selectedBlocks.length = 0;\r\n            }\r\n        } else if (e.type === BlocklyWrapper.Events.BLOCK_DRAG && !e.isStart) {\r\n            activeBlock = e.blockId;\r\n        } else if (\r\n            e.type === BlocklyWrapper.Events.MOVE &&\r\n            e.newCoordinate &&\r\n            e.oldCoordinate &&\r\n            activeBlock\r\n        ) {\r\n            const ignoreBlock = activeBlock;\r\n\r\n            activeBlock = undefined;\r\n\r\n            deltaX = e.newCoordinate.x - e.oldCoordinate.x;\r\n            deltaY = e.newCoordinate.y - e.oldCoordinate.y;\r\n\r\n            for (let i = 0; i < selectedBlocks.length; i++) {\r\n                const block = selectedBlocks[i];\r\n\r\n                if (block.id === ignoreBlock) {\r\n                    continue;\r\n                }\r\n\r\n                block.moveBy(deltaX, deltaY);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n//Based on: https://groups.google.com/g/blockly/c/LXnMujtEzJY/m/FKQjI4OwAwAJ\r\nfunction updateMouseCoords(event: MouseEvent): void {\r\n    const mainWorkspace = BlocklyWrapper.getMainWorkspace();\r\n\r\n    if (!mainWorkspace) {\r\n        return;\r\n    }\r\n\r\n    // Gets the x and y position of the cursor relative to the workspace's parent svg element.\r\n    const mouseXY = BlocklyWrapper.Xml.mouseToSvg(\r\n        event,\r\n        mainWorkspace.getParentSvg(),\r\n        mainWorkspace.getInverseScreenCTM(),\r\n    );\r\n\r\n    // Gets where the visible workspace starts in relation to the workspace's parent svg element.\r\n    const absoluteMetrics = mainWorkspace\r\n        .getMetricsManager()\r\n        .getAbsoluteMetrics();\r\n\r\n    // In workspace coordinates 0,0 is where the visible workspace starts.\r\n    mouseXY.x -= absoluteMetrics.left;\r\n    mouseXY.y -= absoluteMetrics.top;\r\n\r\n    // Takes into account if the workspace is scrolled.\r\n    mouseXY.x -= mainWorkspace.scrollX;\r\n    mouseXY.y -= mainWorkspace.scrollY;\r\n\r\n    // Takes into account if the workspace is zoomed in or not.\r\n    mouseXY.x /= mainWorkspace.scale;\r\n    mouseXY.y /= mainWorkspace.scale;\r\n\r\n    mouseCoords.x = mouseXY.x;\r\n    mouseCoords.y = mouseXY.y;\r\n}\r\n\r\nfunction hotfixDomMutations(): void {\r\n    function hotfixBlock(block: BlockSvg): void {\r\n        //NOTE: Don't fix blocks that don't have state information or implement mutations properly\r\n        if (\r\n            !block.saveExtraState ||\r\n            !block.loadExtraState ||\r\n            (block.mutationToDom && block.domToMutation)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        //NOTE: Always replace this implementation, since it's not needed for backwards compatibility.\r\n        block.mutationToDom = function (): Element {\r\n            const mutation = BlocklyWrapper.Xml.createElement(\"mutation\");\r\n            mutation.setAttribute(\r\n                \"portal-extensions-state\",\r\n                JSON.stringify(this.saveExtraState()),\r\n            );\r\n\r\n            return mutation;\r\n        };\r\n\r\n        const originalDomToMutation = block.domToMutation;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        block.domToMutation = function (mutation: Element): any {\r\n            const stateAttribute = mutation.getAttribute(\r\n                \"portal-extensions-state\",\r\n            );\r\n\r\n            if (stateAttribute) {\r\n                this.loadExtraState(JSON.parse(stateAttribute));\r\n            } else if (originalDomToMutation) {\r\n                // eslint-disable-next-line prefer-rest-params\r\n                originalDomToMutation.apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    //NOTE: Fix the Block-classes\r\n    for (const block of BlocklyWrapper.Blocks.getAllClasses()) {\r\n        hotfixBlock(block.value);\r\n    }\r\n\r\n    //NOTE: Fix the Blocks that are already instanced\r\n    for (const block of BlocklyWrapper.Blocks.getAllInstances()) {\r\n        hotfixBlock(block.value);\r\n    }\r\n}\r\n\r\nexport default {};\r\n","let pasteTextFromClipboardImplementation: () => Promise<string> =\r\n    pasteTextFromClipboardDefault;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nlet pasteTextFromClipboardFirefoxCallback = (_text: string): void => {\r\n    //Do nothing\r\n};\r\n\r\nexport function init(): void {\r\n    //NOTE: If readText is not available, we are going to assume this is Firefox.\r\n    if (navigator.clipboard.readText !== undefined) {\r\n        return;\r\n    }\r\n\r\n    pasteTextFromClipboardImplementation = pasteTextFromClipboardFirefox;\r\n\r\n    window.addEventListener(\r\n        \"bf2042-portal-extensions-paste\",\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        async function (message: any) {\r\n            pasteTextFromClipboardFirefoxCallback(message.detail);\r\n        },\r\n    );\r\n}\r\n\r\nasync function copyTextToClipboard(text: string): Promise<void> {\r\n    return await navigator.clipboard.writeText(text);\r\n}\r\n\r\nasync function copyBlobToClipboard(blobData: Blob): Promise<void> {\r\n    return await navigator.clipboard.write([\r\n        new ClipboardItem({ [blobData.type]: blobData }),\r\n    ]);\r\n}\r\n\r\nasync function pasteTextFromClipboard(): Promise<string> {\r\n    return await pasteTextFromClipboardImplementation();\r\n}\r\n\r\nasync function pasteTextFromClipboardDefault(): Promise<string> {\r\n    return await navigator.clipboard.readText();\r\n}\r\n\r\nasync function pasteTextFromClipboardFirefox(): Promise<string> {\r\n    // eslint-disable-next-line @typescript-eslint/typedef\r\n    return new Promise<string>((resolve, reject) => {\r\n        pasteTextFromClipboardFirefoxCallback = (clipboard: string): void => {\r\n            if (clipboard) {\r\n                resolve(clipboard);\r\n            } else {\r\n                reject();\r\n            }\r\n        };\r\n\r\n        const event: Event = new Event(\"bf2042-portal-extensions-paste\");\r\n        document.dispatchEvent(event);\r\n    });\r\n}\r\n\r\nfunction isCopyBlobToClipboardSupported(): boolean {\r\n    return window.ClipboardItem !== undefined;\r\n}\r\n\r\nfunction logError(message: string, error: Error): void {\r\n    console.log(`[ERROR] ${message}`, error);\r\n}\r\n\r\nfunction loadFromLocalStorage<T>(key: string): T {\r\n    const data: string = localStorage.getItem(key);\r\n\r\n    try {\r\n        if (typeof data === \"string\") {\r\n            return JSON.parse(data) as T;\r\n        }\r\n    } catch (e) {\r\n        //Do nothing\r\n    }\r\n\r\n    return {} as T;\r\n}\r\n\r\nfunction saveToLocalStorage<T>(key: string, data: T): void {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n}\r\n\r\nexport default {\r\n    copyTextToClipboard: copyTextToClipboard,\r\n    copyBlobToClipboard: copyBlobToClipboard,\r\n    pasteTextFromClipboard: pasteTextFromClipboard,\r\n    isCopyBlobToClipboardSupported: isCopyBlobToClipboardSupported,\r\n    loadFromLocalStorage: loadFromLocalStorage,\r\n    saveToLocalStorage: saveToLocalStorage,\r\n    logError: logError,\r\n};\r\n","import * as extensions from \"./Extensions\";\r\nimport * as plugins from \"./Plugins\";\r\nimport * as shared from \"./Shared\";\r\n\r\nBF2042Portal.Shared = shared.default;\r\nBF2042Portal.Plugins = plugins.default;\r\nBF2042Portal.Extensions = extensions.default;\r\n\r\nshared.init();\r\nextensions.init();\r\n"],"names":["BasePlugin","initData","baseUrl","manifest","relativeUrl","scope","options","menu","item","id","name","scopeType","plugins","init","data","loadPluginManager","pluginManager","loadPlugin","pluginData","plugin","scriptElement","e","_a","initializeWorkspace","getPlugin","Plugins","blocklyWrapper","blockly","blocklyTranslations","self","key","splitKeys","firstElement","index","event","rtl","workspace","block","xmlDom","BlocklyWrapper","blocklyConfig","mouseCoords","contextMenuStack","lastContextMenu","blockLookup","blockCategories","selectedBlocks","shiftKey","imageDataUrlCache","copyToClipboard","errorMessage","precondition","callback","blocks","getSelectedBlocks","xmlText","saveXml","pasteFromClipboard","loadXml","toggleComments","displayText","toggleType","commentText","i","toggleInputs","isInputInline","toggleCollapse","isCollapsed","collapseAllBlocks","expandAllBlocks","deleteModBlock","openDocumentation","documentationUrl","jumpToSubRoutine","subroutineName","foundBlocks","toggleDistractionFreeMode","toggleToolbox","exportBlocksWorkspace","exportBlocks","exportBlocksBlock","menuItems","exportToXml","exportToSvg","exportToPngAsFile","exportToPngOnClipboard","showContextMenuWithBack","dataUri","downloadFile","svgData","blocksToSvg","pngData","svgToData","blobData","convertImagesToDataURI","x","y","width","height","minX","minY","maxX","maxY","xy","boundingBox","clone","svg","css","el","style","svgAsXML","matches","match","url","dataUrl","resolve","reject","blob","reader","f","_","scale","dataType","canvas","context","img","fileData","fileName","linkElement","importBlocksFromFile","inputElement","fileReader","extension","loadData","loadJson","addBlock","entry","subOptions","i2","entry2","role","sortByText","a","b","separatorWorkspace","separator","separatorBlock","optionsWorkspace","createMenu","optionsBlock","subMenuOptions","subMenuItem","createSubMenuItem","registerMenu","registerItem","variablesXml","variables","domText","variableBlocks","objectType","variableName","v","variable","titleCase","value","s","getMouseCoords","cssFixes","hookContextMenu","hookBlockly","initializeBlocks","initializeDocumentEvents","initializeBlockly","pluginInit","styleElement","workspacePrototype","originalWorkspaceShowContextMenu","updateMouseCoords","blockPrototype","originalBlockShowContextMenu","originalShow","hotfixDomMutations","initializeWorkspaceEvents","contentMenuItem","optionsWorkspaceMenu","optionsBlockMenu","addBlockMenuItem","menuItem","itemId","menuId","blockDefinitions","getCategory","selectionLists","ignoreValueBlocks","element","existingCategory","deltaX","deltaY","activeBlock","selectedIndex","ignoreBlock","mainWorkspace","mouseXY","absoluteMetrics","hotfixBlock","mutation","originalDomToMutation","stateAttribute","Extensions","pasteTextFromClipboardImplementation","pasteTextFromClipboardDefault","pasteTextFromClipboardFirefoxCallback","_text","pasteTextFromClipboardFirefox","message","copyTextToClipboard","text","copyBlobToClipboard","pasteTextFromClipboard","clipboard","isCopyBlobToClipboardSupported","logError","error","loadFromLocalStorage","saveToLocalStorage","Shared","shared.default","plugins.default","extensions.default","shared.init","extensions.init"],"mappings":"aAyCA,MAAMA,EAAW,CAKb,YAAYC,EAAoBC,EAAiBC,EAA0B,CACvE,KAAK,SAAWF,EAChB,KAAK,QAAUC,EACf,KAAK,SAAWC,CACpB,CAEO,qBAA4B,CAEnC,CAEO,OAAOC,EAA6B,CAChC,MAAA,GAAG,KAAK,WAAWA,GAC9B,CAEO,gBAA8B,CAC1B,OAAA,KAAK,SAAS,IAAI,eAAe,CAC5C,CAEO,kBAAkBC,EAA+B,CACpD,OAAO,KAAK,SAAS,IAAI,kBAAkBA,CAAK,CACpD,CAEO,wBAAwBC,EAAkC,CAC7D,OAAO,KAAK,SAAS,IAAI,wBAAwBA,CAAO,CAC5D,CAEO,aAAaC,EAA8B,CAC9C,OAAO,KAAK,SAAS,IAAI,aAAaA,CAAI,CAC9C,CAEO,aAAaC,EAA0B,CAC1C,OAAO,KAAK,SAAS,IAAI,aAAaA,CAAI,CAC9C,CAEO,WACHC,EACAC,EACAC,EACgB,CAChB,OAAO,KAAK,SAAS,IAAI,WAAWF,EAAIC,EAAMC,CAAS,CAC3D,CAEO,qBAA8B,CACjC,OAAO,KAAK,SAAS,OACzB,CACJ,CAEA,MAAMC,MAAuC,IAE7C,IAAIX,EAEG,SAASY,GAAKC,EAAsB,CAC5Bb,EAAAa,EAEPA,EAAK,eACLC,GAAkBD,EAAK,aAAa,CAE5C,CAEA,SAASC,GAAkBC,EAA4C,CACxDC,EAAA,CACP,QAASD,EAAc,QACvB,SAAU,CACN,GAAI,iBACJ,aAAcA,EAAc,cAAgB,GAC5C,KAAMA,EAAc,IACxB,CAAA,CACH,CACL,CAEA,SAASC,EAAWC,EAA8B,OAC1C,GAAA,CACA,MAAMC,EAAqB,IAAInB,GAC3BC,EACAiB,EAAW,QACXA,EAAW,QAAA,EAEfN,EAAQ,IAAIM,EAAW,SAAS,GAAIC,CAAM,EAEpC,MAAAC,EACF,SAAS,cAAc,QAAQ,EACrBA,EAAA,aACV,OACAF,EAAW,SAAS,aAAe,SAAW,iBAAA,EAEpCE,EAAA,aACV,MACAD,EAAO,OAAOD,EAAW,SAAS,IAAI,CAAA,EAE5BE,EAAA,iBAAiB,OAAQ,UAAY,CAC/CD,EAAO,oBAAoB,CAAA,CAC9B,EAEQ,SAAA,KAAK,YAAYC,CAAa,QAClCC,GACL,aAAa,OAAO,SAChB,4BACIC,EAAAJ,EAAW,WAAX,YAAAI,EAAqB,OAAQJ,EAAW,SAAS,OAErDG,CAAA,CAER,CACJ,CAEA,SAASE,IAA4B,CACtB,UAAAJ,KAAUP,EAAQ,SACzBO,EAAO,oBAAoB,CAEnC,CAEA,SAASK,GAAUf,EAAwB,CACjC,MAAAU,EAAqBP,EAAQ,IAAIH,CAAE,EAEzC,GAAI,CAACU,EACD,KAAM,kBAAkBV,eAGrB,OAAAU,CACX,CAEA,MAAeM,GAAA,CACX,oBAAAF,GACA,UAAAC,GACA,WAAAP,CACJ,ECxGA,SAASS,GAELC,EAEAC,EACc,CACd,MAAMC,EAAuB,CAAA,EAE7B,OAAAA,EAAK,OAASF,EAAQ,OAEtBE,EAAK,iBAAmB,UAA0B,CAC9C,OAAOF,EAAQ,kBAAiB,EAG/BE,EAAA,eAAiB,SAAUC,EAAqB,CAC3C,MAAAC,EAAYD,EAAI,MAAM,GAAG,EAE/B,IAAIE,EAAeJ,EAAoB,IAAI,IAAIG,EAAU,CAAC,CAAC,EAE3D,QAASE,EAAQ,EAAGA,EAAQF,EAAU,OAAQE,IAC3BD,EAAAA,EAAaD,EAAUE,CAAK,CAAC,EAGzC,OAAAD,CAAA,EAGXH,EAAK,OAAS,CACV,YAAa,UAAsB,CAC/B,OAAOF,EAAQ,aACnB,EAEA,cAAe,UAGZ,CACC,OAAO,OAAO,KAAKA,EAAQ,MAAM,EAAE,IAAKN,IAC7B,CACH,IAAKA,EACL,MAAOM,EAAQ,OAAON,CAAC,CAAA,EAE9B,CACL,EAEA,gBAAiB,UAAqD,CAC3D,OAAAQ,EACF,mBACA,aAAa,EAAK,EAClB,IAAKR,IACK,CACH,IAAKA,EAAE,GACP,MAAOA,CAAA,EAEd,CACT,CAAA,EAGJQ,EAAK,YAAc,CACf,UAAW,CACP,MAAOF,EAAQ,oBAAoB,UAAU,MAC7C,UAAWA,EAAQ,oBAAoB,UAAU,SACrD,EAEA,KAAM,SACFO,EACA5B,EACA6B,EACI,CACJR,EAAQ,YAAY,KAAKO,EAAO5B,EAAS6B,CAAG,CAChD,EAEA,uBAAwB,SACpBC,EACwB,CACjB,OAAAT,EAAQ,oBAAoB,SAAS,sBACxCE,EAAK,YAAY,UAAU,UAC3B,CACI,UAAAO,CACJ,CAAA,CAER,EAEA,mBAAoB,SAChBC,EACwB,CACjB,OAAAV,EAAQ,oBAAoB,SAAS,sBACxCE,EAAK,YAAY,UAAU,MAC3B,CACI,MAAAQ,CACJ,CAAA,CAER,EAEA,YAAa,UAAyD,CAClE,MAAO,CAAC,GAAGV,EAAQ,oBAAoB,SAAS,SAAS,EAAE,IACtDN,IACU,CACH,IAAKA,EAAE,CAAC,EACR,MAAOA,EAAE,CAAC,CAAA,EAElB,CAER,EAEA,eAAgB,SAAUb,EAAoB,CAClCmB,EAAA,oBAAoB,SAAS,WAAWnB,CAAI,CACxD,EAEA,aAAc,SAAUA,EAA0B,CACtCmB,EAAA,oBAAoB,SAAS,SAASnB,CAAI,CACtD,CAAA,EAGJqB,EAAK,IAAM,CACP,cAAeF,EAAQ,MAAM,IAAI,cACjC,WAAYA,EAAQ,cAAc,WAElC,eAAgBA,EAAQ,IAAI,eAC5B,UAAWA,EAAQ,IAAI,UAEvB,eAAgBA,EAAQ,IAAI,eAC5B,eAAgBA,EAAQ,IAAI,eAC5B,UAAWA,EAAQ,IAAI,UAEvB,WAAY,SAAUU,EAAyB,CAC3C,MAAMC,EAASX,EAAQ,IAAI,iBAAiBU,EAAO,EAAI,EAC/C,OAAAV,EAAA,IAAI,WAAWW,CAAM,EAEbX,EAAQ,IAAI,UAAUW,CAAM,EAAE,QAC1C,oDACA,EAAA,CAIR,CAAA,EAGGT,CACX,CAEA,MAAMU,EAAiBb,GAAe,SAAU,OAAO,EAWjDc,EAA+B,CACjC,MAAO,CAAC,EACR,MAAO,CAAC,CACZ,EAqCMC,EAA2B,CAC7B,EAAG,EACH,EAAG,CACP,EAOMC,EAA6C,CAAA,EACnD,IAAIC,EAEJ,MAAMC,EAAkC,CAAA,EAClCC,EAAwC,CAAA,EAExCC,EAAkC,CAAA,EAExC,IAAIC,EAAW,GAEf,MAAMC,MAAwB,IAG9B,SAASC,IAAgC,CACrC,MAAMC,EAAe,yCAErB,SAASC,GAAuB,CACrB,MAAA,SACX,CAEA,eAAeC,EAAS/C,EAA6B,CAC7C,GAAA,CACM,MAAAgD,EAASC,EAAkBjD,CAAK,EAChCkD,EAAUC,EAAQH,CAAM,EAE9B,GAAI,CAACE,EAAS,CACV,MAAML,CAAY,EAElB,OAGE,MAAA,aAAa,OAAO,oBAAoBK,CAAO,QAChDlC,GACQ,aAAA,OAAO,SAAS6B,EAAc7B,CAAC,EAE5C,MAAM6B,CAAY,CACtB,CACJ,CAEO,MAAA,CACH,GAAI,kBACJ,YAAa,6BACb,UAAWX,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASK,IAAmC,CACxC,MAAMP,EAAe,wCAGrB,SAASC,GAAuB,CACrB,MAAA,SACX,CAEA,eAAeC,GAA0B,CACjC,GAAA,CACA,MAAMG,EAAU,MAAM,aAAa,OAAO,uBAAuB,EAE5DG,GAAQH,CAAO,GAChB,MAAML,CAAY,QAEjB7B,GACQ,aAAA,OAAO,SAAS6B,EAAc7B,CAAC,EAE5C,MAAM6B,CAAY,CACtB,CACJ,CAEO,MAAA,CACH,GAAI,qBACJ,YAAa,4BACb,UAAWX,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASO,IAA+B,CACpC,SAASC,EAAYvD,EAAsB,CACvC,MAAMwD,EAAaxD,EAAM,MAAM,iBAAmB,UAAY,WAExDgD,EAASC,EAAkBjD,CAAK,EAElC,OAAAgD,EAAO,SAAW,EACX,GAAGQ,gBAGP,GAAGA,kBAA2BR,EAAO,gBAChD,CAEA,SAASF,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAClC,MAAMyD,EAAczD,EAAM,MAAM,iBAAmB,KAAO,GAEpDgD,EAASC,EAAkBjD,CAAK,EAEtC,QAAS0D,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IACxBV,EAAAU,CAAC,EAAE,eAAeD,CAAW,CAE5C,CAEO,MAAA,CACH,GAAI,iBACJ,YAAAF,EACA,UAAWrB,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASY,IAA6B,CAClC,SAASJ,EAAYvD,EAAsB,CACvC,MAAMwD,EAAaxD,EAAM,MAAM,kBACzB,cACA,gBAEAgD,EAASC,EAAkBjD,CAAK,EAElC,OAAAgD,EAAO,SAAW,EACX,kBAAkBQ,IAGtB,kBAAkBA,MAAeR,EAAO,gBACnD,CAEA,SAASF,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAClC,MAAM4D,EAAgB,CAAC5D,EAAM,MAAM,gBAAgB,EAE7CgD,EAASC,EAAkBjD,CAAK,EAEtC,QAAS0D,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IACxBV,EAAAU,CAAC,EAAE,gBAAgBE,CAAa,CAE/C,CAEO,MAAA,CACH,GAAI,eACJ,YAAAL,EACA,UAAWrB,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASc,IAA+B,CACpC,SAASN,EAAYvD,EAAsB,CACvC,MAAMwD,EAAaxD,EAAM,MAAM,cAAgB,aAAe,WAExDgD,EAASC,EAAkBjD,CAAK,EAElC,OAAAgD,EAAO,SAAW,EACX,GAAGQ,SAGP,GAAGA,KAAcR,EAAO,eACnC,CAEA,SAASF,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAClC,MAAM8D,EAAc,CAAC9D,EAAM,MAAM,YAAY,EAEvCgD,EAASC,EAAkBjD,CAAK,EAEtC,QAAS0D,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IACxBV,EAAAU,CAAC,EAAE,aAAaI,CAAW,CAE1C,CAEO,MAAA,CACH,GAAI,iBACJ,YAAAP,EACA,UAAWrB,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASgB,IAAkC,CACvC,SAASR,EAAYvD,EAAsB,CACjC,MAAAgD,EAASC,EAAkBjD,CAAK,EAEtC,OAAIgD,EACIA,EAAO,SAAW,EACX,gBAGJ,YAAYA,EAAO,gBAGvB,oBACX,CAEA,SAASF,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAC5B,MAAAgD,EAASC,EAAkBjD,CAAK,EAEtC,GAAIgD,EACA,QAASU,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IACxBV,EAAAU,CAAC,EAAE,aAAa,EAAI,MAE5B,CACG,MAAA3B,EAAYG,EAAe,mBAEjC,UAAWF,KAASD,EAAU,aAAa,EAAK,EAC5CC,EAAM,aAAa,EAAI,EAGnC,CAEO,MAAA,CACH,GAAI,oBACJ,YAAAuB,EACA,UAAWrB,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASiB,IAAgC,CACrC,SAAST,EAAYvD,EAAsB,CACjC,MAAAgD,EAASC,EAAkBjD,CAAK,EAEtC,OAAIgD,EACIA,EAAO,SAAW,EACX,kBAGJ,cAAcA,EAAO,gBAGzB,sBACX,CAEA,SAASF,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAC5B,MAAAgD,EAASC,EAAkBjD,CAAK,EAEtC,GAAIgD,EACA,QAASU,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IACxBV,EAAAU,CAAC,EAAE,aAAa,EAAK,MAE7B,CACG,MAAA3B,EAAYG,EAAe,mBAEjC,UAAWF,KAASD,EAAU,aAAa,EAAK,EAC5CC,EAAM,aAAa,EAAK,EAGpC,CAEO,MAAA,CACH,GAAI,kBACJ,YAAAuB,EACA,UAAWrB,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASkB,IAA+B,CACpC,SAASnB,EAAa9C,EAAsB,CACxC,OACIA,EAAM,MAAM,OAAS,YACrBkC,EAAe,mBAAmB,gBAAgB,WAAY,EAAK,EAC9D,OAAS,EAEP,UAGJ,QACX,CAEA,SAASa,EAAS/C,EAAoB,CAC5BA,EAAA,MAAM,QAAQ,GAAO,EAAK,CACpC,CAEO,MAAA,CACH,GAAI,iBACJ,YAAa,mBACb,UAAWkC,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASmB,IAAkC,CACvC,MAAMC,EAAmB,kCAEzB,SAASrB,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,GAAiB,CACf,OAAA,KAAKoB,EAAkB,sBAAsB,CACxD,CAEO,MAAA,CACH,GAAI,oBACJ,YAAa,uBACb,UAAWjC,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASqB,IAAiC,CACtC,SAAStB,EAAa9C,EAAsB,CACpC,OAAAA,EAAM,MAAM,OAAS,0BACd,UAGJ,QACX,CAEA,SAAS+C,EAAS/C,EAAoB,CAClC,MAAMqE,EAAiBrE,EAAM,MAAM,cAAc,iBAAiB,EAE5DsE,EAAcpC,EAAe,iBAAA,EAC9B,gBAAgB,kBAAmB,EAAK,EACxC,OACIlB,GACGA,EAAE,cAAc,iBAAiB,IAAMqD,CAAA,EAG/CC,EAAY,OAAS,GACrBpC,EAAe,mBAAmB,cAAcoC,EAAY,CAAC,EAAE,EAAE,CAEzE,CAEO,MAAA,CACH,GAAI,mBACJ,YAAa,yBACb,UAAWpC,EAAe,YAAY,UAAU,MAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASwB,IAA0C,CAC/C,SAASzB,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,GAAiB,CACtB,SAAS,cAAc,UAAU,EAAE,UAAU,OAAO,kBAAkB,EAEvDb,EAAA,mBAAmB,QACtC,CAEO,MAAA,CACH,GAAI,4BACJ,YAAa,8CACb,UAAWA,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASyB,IAA8B,CACnC,SAAS1B,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,GAAiB,CACtB,SAAS,cAAc,UAAU,EAAE,UAAU,OAAO,cAAc,EAEnDb,EAAA,mBAAmB,QACtC,CAEO,MAAA,CACH,GAAI,gBACJ,YAAa,kCACb,UAAWA,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAAS0B,IAAsC,CACpC,OAAAC,EACH,wBACAxC,EAAe,YAAY,UAAU,SAAA,CAE7C,CAEA,SAASyC,IAAkC,CAChC,OAAAD,EACH,oBACAxC,EAAe,YAAY,UAAU,KAAA,CAE7C,CAEA,SAASwC,EAAatE,EAAYE,EAAoC,CAOlE,SAASwC,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAClC,MAAM4E,EAAY,CACd,CACI,KAAM,MACN,QAAS,GACT,SAAU,IAAMC,EAAY7E,CAAK,CACrC,EACA,CACI,KAAM,MACN,QAAS,GACT,SAAU,IAAM8E,EAAY9E,CAAK,CACrC,EACA,CACI,KAAM,MACN,QAAS,GACT,SAAU,IAAM+E,EAAkB/E,CAAK,CAC3C,CAAA,EAGA,aAAa,OAAO,kCACpB4E,EAAU,KAAK,CACX,KAAM,qBACN,QAAS,GACT,SAAU,IAAMI,EAAuBhF,CAAK,CAAA,CAC/C,EAGLiF,EAAwBL,CAAS,CACrC,CAEA,eAAeC,EAAY7E,EAA6B,CAC9C,MAAAgD,EAASC,EAAkBjD,CAAK,EAChCkD,EAAUC,EAAQH,CAAM,EAE9B,GAAI,CAACE,EAAS,CACV,MAAM,gCAAgC,EAEtC,OAGJ,MAAMgC,EAAU,sCAAsC,mBAClDhC,CACJ,IAEAiC,EAAaD,EAAS,eAAe,CACzC,CAEA,eAAeJ,EAAY9E,EAA6B,CAC9C,MAAAgD,EAASC,EAAkBjD,CAAK,EAChCoF,EAAU,MAAMC,EAAYrC,EAAQ,EAAK,EAElCmC,EAAAC,EAAQ,WAAY,gBAAgB,CACrD,CAEA,eAAeL,EAAkB/E,EAA6B,CACtD,GAAA,CACM,MAAAgD,EAASC,EAAkBjD,CAAK,EAChCoF,EAAU,MAAMC,EAAYrC,EAAQ,EAAI,EACxCsC,EAAW,MAAMC,EAAUH,EAAS,EAAG,KAAK,EAElDD,EAAaG,EAAS,gBAAgB,QACjCtE,GACQ,aAAA,OAAO,SAAS,2CAA4CA,CAAC,EAE1E,MAAM,2CAA2C,CACrD,CACJ,CAEA,eAAegE,EAAuBhF,EAA6B,CAC3D,GAAA,CACM,MAAAgD,EAASC,EAAkBjD,CAAK,EAChCoF,EAAU,MAAMC,EAAYrC,EAAQ,EAAI,EACxCwC,EAAY,MAAMD,EAAUH,EAAS,EAAG,MAAM,EAE9C,MAAA,aAAa,OAAO,oBAAoBI,CAAQ,EAEtD,MAAM,SAAS,QACVxE,GACQ,aAAA,OAAO,SAAS,+CAAgDA,CAAC,EAE9E,MAAM,+CAA+C,CACzD,CACJ,CAGe,eAAAqE,EACXrC,EACAyC,EACgB,CACV,MAAA1D,EAAYG,EAAe,mBAC7B,IAAAwD,EAAWC,EAAWC,EAAeC,EAErC,GAAA7C,GAAUA,EAAO,OAAS,EAAG,CAEzB,IAAA8C,EAAMC,EAAMC,EAAMC,EAEtB,QAASvC,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IAAK,CAC9B,MAAA1B,EAAQgB,EAAOU,CAAC,EAChBwC,EAAKlE,EAAM,0BAEb,CAAC8D,GAAQI,EAAG,EAAIJ,KAChBA,EAAOI,EAAG,IAGV,CAACH,GAAQG,EAAG,EAAIH,KAChBA,EAAOG,EAAG,IAGV,CAACF,GAAQE,EAAG,EAAIlE,EAAM,MAAQgE,KACvBA,EAAAE,EAAG,EAAIlE,EAAM,QAGpB,CAACiE,GAAQC,EAAG,EAAIlE,EAAM,OAASiE,KACxBA,EAAAC,EAAG,EAAIlE,EAAM,QAIxB0D,EAAAI,EACAH,EAAAI,EACJH,EAAQI,EAAOF,EACfD,EAASI,EAAOF,MACb,CACG,MAAAI,EAAcpE,EAAU,uBAC9B2D,EAAIS,EAAY,KAChBR,EAAIQ,EAAY,IAChBP,EAAQO,EAAY,MAAQT,EAC5BG,EAASM,EAAY,OAASR,EAI5B,MAAAS,EADcrE,EAAU,YACJ,UAAU,EAAI,EACxCqE,EAAM,gBAAgB,WAAW,EAEjC,MAAMC,EAAM,SAAS,gBACjB,6BACA,KAAA,EAEAA,EAAA,aAAa,QAAS,4BAA4B,EACtDA,EAAI,YAAYD,CAAK,EACrBC,EAAI,aAAa,UAAW,GAAGX,KAAKC,KAAKC,KAASC,GAAQ,EACtDQ,EAAA,aACA,QACA,cAActE,EAAU,QAAQ,UAAY,oBACxCA,EAAU,SAAWA,EAAU,SAAW,EAAA,KAAO,SAAW,IAAA,EAGpEsE,EAAI,aAAa,QAAST,EAAM,SAAU,CAAA,EAC1CS,EAAI,aAAa,SAAUR,EAAO,SAAU,CAAA,EACxCQ,EAAA,aAAa,QAAS,+BAA+B,EAEzD,MAAMC,GAAM,CAAA,EAAG,MACV,KAAK,SAAS,KAAK,iBAAiB,OAAO,CAAC,EAC5C,OAAO,SAAUC,EAAsB,CAEhC,MAAA,eAAe,KAAKA,EAAG,SAAS,GAChCA,EAAG,GAAG,QAAQ,UAAU,IAAM,CAAA,CAErC,EACA,IAAI,SAAUA,EAAsB,CACjC,OAAOA,EAAG,SAAA,CACb,EACA,KAAK,EAAE,EAENC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,UAAYF,GACdD,EAAA,aAAaG,EAAOH,EAAI,UAAU,EAElC,IAAAI,EAAW,IAAI,cAAc,EAC5B,kBAAkBJ,CAAG,EACrB,QAAQ,SAAU,OAAO,EAE9B,GAAIZ,EAAwB,CACxB,MAAMiB,EAAU,CAAC,GAAGD,EAAS,SAAS,qBAAqB,CAAC,EAE5D,UAAWE,KAASD,EAAS,CACnB,MAAAE,EAAMD,EAAM,CAAC,EAEnB,GAAI,EAAAC,EAAI,WAAW,OAAO,GAAKjE,EAAkB,IAAIiE,CAAG,GAIpD,GAAA,CACM,MAAAC,EAAU,MAAM,IAAI,QAEtB,MAAOC,EAASC,IAAW,CACnB,GAAA,CAMM,MAAAC,GAAO,MAJI,MAAM,MACnB,iCAAmCJ,CAAA,GAGX,OAEtBK,EAAS,IAAI,WACZA,EAAA,OACHC,IACO,CACCJ,EAAAI,GAAE,OAAO,MAAgB,CAAA,EAErCD,EAAO,cAAcD,EAAI,QAElBD,GACX,CACJ,CAAA,EAGcpE,EAAA,IAAIiE,EAAKC,CAAO,QAEhBlE,EAAA,IAAIiE,EAAKA,CAAG,CAClC,GAIRH,EAAWA,EAAS,QAChB,sBACA,SAAUU,EAAWP,EAAa,CAK9B,MAAO,eAJQjE,EAAkB,IAAIiE,CAAG,EAClCjE,EAAkB,IAAIiE,CAAG,EACzBA,IAGV,CAAA,EAGE,MAAAnG,GAAO,sBAAsB,mBAAmBgG,CAAQ,IAEvD,MAAA,CACH,MAAAb,EACA,OAAAC,EACA,WAAYpF,EAAA,CAEpB,CAEe,eAAA8E,EACXH,EACAgC,EACAC,EACsB,CAiDf,OA/CS,IAAI,QAAuB,CAACP,EAASC,IAAW,CACtD,MAAAO,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAUD,EAAO,WAAW,IAAI,EAChCE,EAAM,IAAI,MAETF,EAAA,MAAQlC,EAAQ,MAAQgC,EACxBE,EAAA,OAASlC,EAAQ,OAASgC,GAE7BE,EAAO,MAAQ,OAASA,EAAO,OAAS,QACxCP,EACI,mHAAA,EAIRS,EAAI,OAAS,UAAkB,CACnBD,EAAA,UACJC,EACA,EACA,EACApC,EAAQ,MACRA,EAAQ,OACR,EACA,EACAkC,EAAO,MACPA,EAAO,MAAA,EAGP,GAAA,CACA,GAAID,IAAa,MAAO,CACd,MAAAnC,EAAUoC,EAAO,UAAU,WAAW,EAE5CR,EAAQ5B,CAAO,UACRmC,IAAa,OACbC,EAAA,OAAO,SAAUN,EAAkB,CACtCF,EAAQE,CAAI,CAAA,CACf,MAEK,MAAA,qBAELhG,GACL+F,EAAO,kCAAkC/F,GAAG,CAChD,CAAA,EAGJwG,EAAI,IAAMpC,EAAQ,UAAA,CACrB,CAGL,CAES,SAAAD,EAAasC,EAAkBC,EAAwB,CACtD,MAAAC,EAAc,SAAS,cAAc,GAAG,EAClCA,EAAA,aAAa,OAAQF,CAAQ,EAC7BE,EAAA,aAAa,WAAYD,CAAQ,EAC7CC,EAAY,MAAM,QAAU,OAEnB,SAAA,KAAK,YAAYA,CAAW,EACrCA,EAAY,MAAM,EACT,SAAA,KAAK,YAAYA,CAAW,CACzC,CAEO,MAAA,CACH,GAAAvH,EACA,YAAa,mBACb,UAAAE,EACA,OAAQ,IACR,eAAgBwC,EAChB,SAAAC,CAAA,CAER,CAEA,SAAS6E,IAAqC,CAC1C,SAAS9E,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,GAAiB,CAChB,MAAA8E,EAAe,SAAS,cAAc,OAAO,EACtCA,EAAA,aAAa,OAAQ,MAAM,EAC3BA,EAAA,aAAa,SAAU,YAAY,EAChDA,EAAa,MAAM,QAAU,OAEhBA,EAAA,iBAAiB,SAAU,UAAY,CAChD,GAAI,CAACA,EAAa,OAASA,EAAa,MAAM,SAAW,EACrD,OAGE,MAAAC,EAAa,IAAI,WACZA,EAAA,OAAS,SAAU9G,EAAoC,CAE1D,QACI,0DAAA,GAGWkB,EAAA,mBAAmB,QAGlC,GAAA,CACM,MAAA6F,EAAYF,EAAa,MAAM,CAAC,EAAE,KACnC,MAAM,GAAG,EACT,IAAI,EACJ,YAAY,EAEjB,GAAIE,IAAc,OAAQ,CACtB,MAAMC,EAAW,KAAK,MAAMhH,EAAE,OAAO,MAAgB,EAEhDiH,GAASD,CAAQ,GAClB,MAAM,mDAAmD,OAEtDD,IAAc,QAChB1E,GAAQrC,EAAE,OAAO,MAAgB,GAClC,MAAM,kDAAkD,SAIhE,MAAM,2CAA2C,CACrD,CAAA,EAGJ8G,EAAW,WAAWD,EAAa,MAAM,CAAC,CAAC,CAAA,CAC9C,EAEQ,SAAA,KAAK,YAAYA,CAAY,EACtCA,EAAa,MAAM,EACV,SAAA,KAAK,YAAYA,CAAY,CAC1C,CAEO,MAAA,CACH,GAAI,uBACJ,YAAa,yBACb,UAAW3F,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAASmF,IAAyB,CAC9B,SAASpF,GAAuB,CACrB,MAAA,SACX,CAGA,SAASC,GAAiB,CACtB,MAAM9C,EAA6B,CAAA,EAEnC,QAASyD,EAAI,EAAGA,EAAIlB,EAAgB,OAAQkB,IAAK,CACvC,MAAAyE,EAAQ3F,EAAgBkB,CAAC,EAE/BzD,EAAQ,KAAK,CACT,KAAMkI,EAAM,YACZ,QAAS,GACT,SAAU,UAAY,CAClB,MAAMC,EAAgC,CAAA,EAEtC,QAASC,EAAK,EAAGA,EAAKF,EAAM,SAAS,OAAQE,IAAM,CACzC,MAAAC,EAASH,EAAM,SAASE,CAAE,EAE5B,IAAAE,EAEJ,OAAQD,EAAO,KAAM,CACjB,IAAK,MACMC,EAAA,IACP,MAEJ,IAAK,OACL,IAAK,gBACMA,EAAA,KACP,MAEJ,IAAK,YACMA,EAAA,KACP,MAEJ,IAAK,QACL,IAAK,UACMA,EAAA,KACP,MAEJ,IAAK,SACMA,EAAA,KACP,MAEJ,QACWA,EAAA,IACP,KACR,CAEAH,EAAW,KAAK,CACZ,KAAM,GAAGG,KAAQD,EAAO,cACxB,QAAS,GACT,SAAU,UAAY,CACZ,MAAAtG,EACFE,EAAe,iBAAA,EAAmB,SAC9BoG,EAAO,YAAA,EAEftG,EAAM,QAAQ,EACdA,EAAM,OAAO,EAGbA,EAAM,OAAOI,CAAyB,CAC1C,CAAA,CACH,EAGmB6C,EAAAmD,EAAW,KAAKI,CAAU,CAAC,CACvD,CAAA,CACH,EAGmBvD,EAAAhF,EAAQ,KAAKuI,CAAU,CAAC,CACpD,CAES,SAAAA,EAAWC,EAAeC,EAAuB,CACtD,OAAOD,EAAE,KAAOC,EAAE,KAAO,EAAI,EACjC,CAEO,MAAA,CACH,GAAI,WACJ,YAAa,kBACb,UAAWxG,EAAe,YAAY,UAAU,UAChD,OAAQ,IACR,eAAgBY,EAChB,SAAAC,CAAA,CAER,CAEA,SAAS4F,IAAmC,CACjC,OAAAC,EACH,qBACA1G,EAAe,YAAY,UAAU,SAAA,CAE7C,CAEA,SAAS2G,IAA+B,CAC7B,OAAAD,EACH,iBACA1G,EAAe,YAAY,UAAU,KAAA,CAE7C,CAEA,SAAS0G,EAAUxI,EAAYJ,EAAgC,CACpD,MAAA,CACH,GAAAI,EACA,YAAa,MACb,UAAWJ,EACX,OAAQ,IACR,eAAgB,IAAM,WACtB,SAAU,IAAY,CAEtB,CAAA,CAER,CAGA,SAAS8I,IAAqC,CACnC,OAAAC,EACH,mBACA,QACA7G,EAAe,YAAY,UAAU,SAAA,CAE7C,CAEA,SAAS8G,IAAiC,CAC/B,OAAAD,EACH,eACA,QACA7G,EAAe,YAAY,UAAU,KAAA,CAE7C,CAEA,SAAS6G,EACL3I,EACAC,EACAC,EACgB,CAChB,SAASwC,GAAuB,CACrB,MAAA,SACX,CAEA,SAASC,EAAS/C,EAAoB,CAC5B,MAAAE,EAAOiC,EAAc,MAAM/B,CAAE,EAC7B6I,EAAoC,CAAA,EAE1C,QAASvF,EAAI,EAAGA,EAAIxD,EAAK,QAAQ,OAAQwD,IAAK,CAC1C,MAAMwF,EAAcC,GAChBjJ,EAAK,QAAQwD,CAAC,EACdpD,EACAN,CAAA,EAGCkJ,GAILD,EAAe,KAAKC,CAAW,EAGnCjE,EAAwBgE,CAAc,CAC1C,CAEO,MAAA,CACH,GAAA7I,EACA,YAAa,GAAGC,MAChB,UAAAC,EACA,OAAQ,IACR,eAAgBwC,EAChB,SAAAC,EACA,QAAS,CAAC,CAAA,CAElB,CAEA,SAASoG,GACL/I,EACAE,EACAN,EACU,CACN,IAAAS,EAQJ,GANIL,EAAG,WAAW,QAAQ,EACtBK,EAAO0B,EAAc,MAAM/B,EAAG,UAAU,CAAe,CAAC,EACjDA,EAAG,WAAW,QAAQ,IAC7BK,EAAO0B,EAAc,MAAM/B,EAAG,UAAU,CAAe,CAAC,GAGxD,GAACK,GAAQA,EAAK,YAAcH,GAIzB,MAAA,CACH,KACI,OAAOG,EAAK,aAAgB,SACtBA,EAAK,YACLA,EAAK,YAAYT,CAAK,EAChC,QAASS,EAAK,eAAeT,CAAK,IAAM,UACxC,SAAU,IAAMS,EAAK,SAAST,CAAK,CAAA,CAE3C,CAGA,SAASoJ,EAAalJ,EAA8B,CAClCiC,EAAA,MAAMjC,EAAK,EAAE,EAAIA,CACnC,CAEA,SAASmJ,EAAalJ,EAA0B,CAC9BgC,EAAA,MAAMhC,EAAK,EAAE,EAAIA,CACnC,CAGA,SAASgD,EAAQH,EAAiC,CACxC,MAAAjB,EAAYG,EAAe,mBAE7B,GAAA,CACA,IAAIgB,EAAU,GAEV,GAAAF,GAAUA,EAAO,OAAS,EAAG,CAC7B,QAASU,EAAI,EAAGA,EAAIV,EAAO,OAAQU,IAC/BR,GAAWhB,EAAe,IAAI,WAAWc,EAAOU,CAAC,CAAC,EAG/C,OAAAR,MACJ,CACH,MAAMjB,EAASC,EAAe,IAAI,eAAeH,EAAW,EAAI,EAE1DuH,EAAerH,EAAO,cAAc,WAAW,EAErD,OAAIqH,GACArH,EAAO,YAAYqH,CAAY,EAG5BpH,EAAe,IAAI,UAAUD,CAAM,EACrC,QACG,0DACA,EAAA,EAEH,QAAQ,SAAU,EAAE,SAExBjB,GACQ,aAAA,OAAO,SAAS,wCAAyCA,CAAC,CAC3E,CAGJ,CAEA,SAASiH,GAASxH,EAAkC,CAC1C,MAAAsB,EAAYG,EAAe,mBAE7B,GAAA,CACM,MAAAqH,EAAYrH,EAAe,IAAI,UACjCzB,EAAK,UAAYA,EAAK,UAAY,SAAA,EAGvB,OAAAyB,EAAA,IAAI,eAAeqH,EAAWxH,CAAS,EACtDG,EAAe,IAAI,eACfA,EAAe,IAAI,UAAUzB,EAAK,aAAa,EAC/CsB,CAAA,EAGG,SACFf,GACQ,aAAA,OAAO,SAAS,gDAAiDA,CAAC,CACnF,CAEO,MAAA,EACX,CAEA,SAASqC,GAAQH,EAA0B,CACnC,GAAA,CAOA,GANI,CAACA,IAILA,EAAUA,EAAQ,OAEd,CAACA,EAAQ,WAAW,QAAQ,GACrB,MAAA,GAGL,MAAAsG,EAAU,0DAA0DtG,EAAQ,KAAK,UAEjFjB,EAASC,EAAe,IAAI,UAAUsH,CAAO,EAG7CC,EAAiBxH,EAAO,iBAC1B,sCAAA,EAQEsH,EAA6B,CAAA,EAEpBE,EAAA,QAASzI,GAAe,CACnC,MAAM0I,EAAa1I,EAAE,cACjB,0BACF,EAAA,YACI2I,EACF3I,EAAE,cAAc,mBAAmB,EAAE,YAGrC0I,GACAC,GACA,CAACJ,EAAU,KACNK,GACGA,EAAE,aAAeF,GACjBE,EAAE,eAAiBD,CAAA,GAG3BJ,EAAU,KAAK,CACX,WAAAG,EACA,aAAAC,CAAA,CACH,CACL,CACH,EAEK,MAAAL,EAAe,SAAS,cAAc,WAAW,EAE7CC,EAAA,QAASvI,GAAgB,CACzB,MAAA6I,EAAW,SAAS,cAAc,UAAU,EACzCA,EAAA,aAAa,OAAQ7I,EAAE,UAAU,EAC1C6I,EAAS,UAAY7I,EAAE,aAEvBsI,EAAa,YAAYO,CAAQ,CAAA,CACpC,EAED3H,EAAe,IAAI,eACfoH,EACApH,EAAe,iBAAiB,CAAA,EAIhC,IAAA4D,EACAC,EAEJ,QAASrC,EAAI,EAAGA,EAAIzB,EAAO,WAAW,OAAQyB,IAAK,CACzC,MAAA1B,EAAQC,EAAO,WAAWyB,CAAC,EAE3BgC,EAAI,SAAS1D,EAAM,aAAa,GAAG,CAAC,EACpC2D,EAAI,SAAS3D,EAAM,aAAa,GAAG,CAAC,GAEtC,CAAC8D,GAAQJ,EAAII,KACNA,EAAAJ,IAGP,CAACK,GAAQJ,EAAII,KACNA,EAAAJ,GAKf,QAASjC,EAAI,EAAGA,EAAIzB,EAAO,WAAW,OAAQyB,IAAK,CACzC,MAAA1B,EAAQC,EAAO,WAAWyB,CAAC,EAE3BgC,EAAI,SAAS1D,EAAM,aAAa,GAAG,CAAC,EACpC2D,EAAI,SAAS3D,EAAM,aAAa,GAAG,CAAC,EAEtC0D,IAAMI,EACN9D,EAAM,aAAa,IAAKI,EAAY,EAAE,UAAU,EAEhDJ,EAAM,aAAa,KAAM0D,EAAII,EAAO1D,EAAY,GAAG,UAAU,EAG7DuD,IAAMI,EACN/D,EAAM,aAAa,IAAKI,EAAY,EAAE,UAAU,EAEhDJ,EAAM,aAAa,KAAM2D,EAAII,EAAO3D,EAAY,GAAG,UAAU,EAIrE,OAAAF,EAAe,IAAI,eACfD,EACAC,EAAe,iBAAiB,CAAA,EAG7B,SACFlB,GACQ,aAAA,OAAO,SAAS,+CAAgDA,CAAC,CAClF,CAEO,MAAA,EACX,CAGA,SAAS8I,EAAUC,EAAuB,CAC/B,OAAAA,EACF,MAAM,GAAG,EACT,IACIC,GACGA,EAAE,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAE,UAAU,CAAC,EAAE,YAAY,CAAA,EAE9D,KAAK,GAAG,CACjB,CAGA,SAAS/G,EAAkBjD,EAA+B,CACtD,IAAIgD,EAEA,OAAAP,EAAe,OAAS,IACfO,EAAAP,GAIT,CAACO,IACAd,EAAe,OAAO,eAClBlC,IAAU,QAAaA,EAAM,SAElCgD,EAAS,CAACd,EAAe,OAAO,YAAY,GAAKlC,EAAM,KAAK,GAGzDgD,CACX,CAEA,SAASiH,IAA8B,CAC5B,MAAA,CACH,EAAG7H,EAAY,EACf,EAAGA,EAAY,CAAA,CAEvB,CAEA,SAAS6C,EAAwBhF,EAAkC,CAC9CoC,EAAA,KAAKC,EAAgB,OAAO,EAE7CJ,EAAe,YAAY,KACvBI,EAAgB,EAChB,CAAA,EACK,OACG,CACI,KAAM,UACN,QAAS,GACT,SAAU,IAAM,CACZ,MAAMpC,EAAOmC,EAAiB,OAC1BA,EAAiB,OAAS,EAC1B,CAAA,EAIJH,EAAe,YAAY,KACvBI,EAAgB,EAChBpC,EAAK,CAAC,EACNoC,EAAgB,GAAA,CAExB,CACJ,EACA,CACI,KAAM,MACN,QAAS,GACT,SAAU,IAAM,CAEhB,CACJ,CAAA,EAEH,OAAOrC,CAAO,EACnBqC,EAAgB,GAAA,CAExB,CAYO,SAAS9B,IAAa,CAChB0J,KAEOC,KACJC,KAEKC,GAAA,aAAa,QAAQ,oBAAqB,CAAA,EAClCC,KACPC,KAEPC,GAAA,CACP,IAAK,CACD,kBAAAvH,EACA,eAAAgH,GACA,wBAAAhF,EACA,aAAAmE,EACA,aAAAC,EACA,WAAAN,CACJ,EACA,QAAS,aAAa,QAAQ,WAAW,EACzC,cAAe,aAAa,QAAQ,YAAc,EAAA,aAAA,CACrD,CACL,CAEA,SAASmB,IAAiB,CAChB,MAAAO,EAAe,SAAS,cAAc,OAAO,EACtCA,EAAA,aAAa,OAAQ,UAAU,EAE5CA,EAAa,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBhB,SAAA,KAAK,YAAYA,CAAY,CAC1C,CAEA,SAASN,IAAwB,CACvB,MAAApI,EAAYG,EAAe,mBAE3BwI,EAAmC,OAAO,eAAe3I,CAAS,EAClE4I,EAAmCD,EAAmB,gBAEzCA,EAAA,gBAAkB,SAAU1J,EAAqB,CAEhEqB,EAAiB,OAAS,EAGRC,EAAA,CACd,EAAAtB,EACA,QAASkB,EAAe,YAAY,uBAChC,IACJ,EACA,IAAK,KAAK,GAAA,EAGd0I,EAAkB5J,CAAC,EAGc2J,EAAA,MAAM,KAAM,SAAS,CAAA,EAG1D,MAAME,EAA2B,OAAO,eACpC9I,EAAU,aAAa,EAAK,EAAE,CAAC,CAAA,EAE7B+I,EAA+BD,EAAe,gBAErCA,EAAA,gBAAkB,SAAU7J,EAAqB,CAE5D,OAAAqB,EAAiB,OAAS,EAGRC,EAAA,CACd,EAAAtB,EACA,QAASkB,EAAe,YAAY,mBAChC,IACJ,EACA,IAAK,KAAK,GAAA,EAGd0I,EAAkB5J,CAAC,EAGZ8J,EAA6B,MAAM,KAAM,SAAS,CAAA,EAGvD,MAAAC,EAAe,SAAS,YAAY,KAE1C,SAAS,YAAY,KAAO,SACxB/J,EACAf,EACA6B,EACI,CAEcQ,EAAA,CACd,EAAAtB,EACA,QAAAf,EACA,IAAA6B,CAAA,EAGJ8I,EAAkB5J,CAAC,EAGN+J,EAAA,MAAM,KAAM,SAAS,CAAA,CAE1C,CAEA,SAASX,IAAoB,CACzB,SAASlJ,EAAoBa,EAA+B,CAErCiJ,KAEnBC,GAA0BlJ,CAAS,EAGnC,WAAW,UAAY,CACnB,aAAa,QAAQ,uBACtB,CAAC,CACR,CAGA,MAAMT,EAAU,SAAS,OAEzB,SAAS,OAAS,UAA0B,CAExC,MAAMS,EAAYT,EAAQ,MAAM,KAAM,SAAS,EAE/C,OAAAJ,EAAoBa,CAAS,EAEtBA,CAAA,EAGSb,EAAAgB,EAAe,kBAAkB,CACzD,CAEA,SAASoI,IAAiC,CAC7B,SAAA,iBAAiB,UAAW,SAAU,EAAkB,CAC7D5H,EAAW,EAAE,QAAA,CAChB,EAEQ,SAAA,iBAAiB,QAAS,SAAU,EAAkB,CAC3DA,EAAW,EAAE,QAAA,CAChB,CACL,CAEA,SAAS6H,IAA0B,CAE/B,UAAWW,KAAmBhJ,EAAe,YAAY,YAAA,EACrDmH,EAAa6B,EAAgB,KAAK,EAIvBhJ,EAAA,YAAY,eAAe,gBAAgB,EAC3CA,EAAA,YAAY,eAAe,iBAAiB,EAE3D,MAAMiJ,EAAuBrC,KAC7BqC,EAAqB,OAAS,IAC9BA,EAAqB,QAAU,CAC3B,wBACA,2BACA,0BACA,wBACA,0BACA,kCACA,sBACA,2BACA,8BACA,4BAAA,EAGJ,MAAMC,EAAmBpC,KACzBoC,EAAiB,OAAS,IAC1BA,EAAiB,QAAU,CACvB,uBACA,uBACA,uBACA,qBACA,uBACA,uBACA,yBAAA,EAGJhC,EAAa+B,CAAoB,EACjC/B,EAAagC,CAAgB,EAE7B/B,EAAazG,IAAiB,EAC9ByG,EAAajG,IAAoB,EACjCiG,EAAa/F,IAAgB,EAC7B+F,EAAa1F,IAAc,EAC3B0F,EAAaxF,IAAgB,EAC7BwF,EAAatF,IAAmB,EAChCsF,EAAarF,IAAiB,EAC9BqF,EAAapF,IAAgB,EAC7BoF,EAAanF,IAAmB,EAChCmF,EAAajF,IAAkB,EAC/BiF,EAAa9E,IAA2B,EACxC8E,EAAa7E,IAAe,EAC5B6E,EAAa5E,IAAuB,EACpC4E,EAAa1E,IAAmB,EAChC0E,EAAazB,IAAsB,EACnCyB,EAAaV,IAAoB,EACjCU,EAAaR,IAAgB,EAE7B,MAAMwC,EAAmBnD,KACzBmD,EAAiB,OAAS,KAE1BhC,EAAagC,CAAgB,EAEA,CACzB,iBACA,yBACA,qBACA,uBACA,yBACA,wBACA,0BAAA,EAKiB,QAAQ,SAAUlL,EAAc,CAC7C,IAAAmL,EAEA,GAAAnL,EAAK,WAAW,QAAQ,EAAG,CAC3B,MAAMoL,EAASpL,EAAK,UAAU,CAAe,EAClCmL,EAAAnJ,EAAc,MAAMoJ,CAAM,UAC9BpL,EAAK,WAAW,QAAQ,EAAG,CAClC,MAAMqL,EAASrL,EAAK,UAAU,CAAe,EAClCmL,EAAAnJ,EAAc,MAAMqJ,CAAM,EAGpCF,GAIUpJ,EAAA,YAAY,aAAaoJ,CAAQ,CAAA,CACnD,CACL,CAIA,SAASjB,GAAiBoB,EAA6B,CAEnDlJ,EAAY,KAAK,CACb,KAAM,MACN,SAAUmJ,EAAY,OAAO,EAC7B,aAAc,WACd,YAAa5B,EAAU5H,EAAe,eAAe,YAAY,CAAC,CAAA,CACrE,EAEDK,EAAY,KAAK,CACb,KAAM,OACN,SAAUmJ,EAAY,OAAO,EAC7B,aAAc,YACd,YAAa5B,EAAU5H,EAAe,eAAe,aAAa,CAAC,CAAA,CACtE,EAEDK,EAAY,KAAK,CACb,KAAM,YACN,SAAUmJ,EAAY,OAAO,EAC7B,aAAc,iBACd,YAAa5B,EACT5H,EAAe,eAAe,kBAAkB,CACpD,CAAA,CACH,EAEDK,EAAY,KAAK,CACb,KAAM,UACN,SAAUmJ,EAAY,UAAU,EAChC,aAAc,UACd,YAAaxJ,EAAe,eAAe,qBAAqB,CAAA,CACnE,EAEDK,EAAY,KAAK,CACb,KAAM,UACN,SAAUmJ,EAAY,UAAU,EAChC,aAAc,SACd,YAAaxJ,EAAe,eAAe,oBAAoB,CAAA,CAClE,EAEDK,EAAY,KAAK,CACb,KAAM,UACN,SAAUmJ,EAAY,UAAU,EAChC,aAAc,OACd,YAAaxJ,EAAe,eAAe,oBAAoB,CAAA,CAClE,EAEDK,EAAY,KAAK,CACb,KAAM,QACN,SAAUmJ,EAAY,QAAQ,EAC9B,aAAc,gBACd,YAAaxJ,EAAe,eACxB,kCACJ,CAAA,CACH,EAEDK,EAAY,KAAK,CACb,KAAM,QACN,SAAUmJ,EAAY,QAAQ,EAC9B,aAAc,oBACd,YAAaxJ,EAAe,eACxB,sCACJ,CAAA,CACH,EAEDK,EAAY,KAAK,CACb,KAAM,QACN,SAAUmJ,EAAY,QAAQ,EAC9B,aAAc,kBACd,YAAaxJ,EAAe,eACxB,oCACJ,CAAA,CACH,EAEDK,EAAY,KAAK,CACb,KAAM,QACN,SAAUmJ,EAAY,aAAa,EACnC,aAAc,0BACd,YAAa,uBAAA,CAChB,EAEDnJ,EAAY,KAAK,CACb,KAAM,SACN,SAAUmJ,EAAY,aAAa,EACnC,aAAc,gBACd,YAAa,SAAA,CAChB,EAGD,MAAMC,EAAiB,CACnB,GAAG,IAAI,IAEHF,EAAiB,eAAe,IAE3BzK,GAAWA,EAAE,SAAW,MAC7B,CACJ,CAAA,EAIE4K,EAAoB,CACtB,aAAA,EAGJ,QAAShK,EAAQ,EAAGA,EAAQ6J,EAAiB,OAAO,OAAQ7J,IAAS,CAC3D,MAAAiK,EAAUJ,EAAiB,OAAO7J,CAAK,EAGzC,GAAA,CAACiK,EAAQ,SAAU,CACnB,GAAID,EAAkB,SAASC,EAAQ,IAAI,EACvC,SAGAA,EAAQ,OAAS,cACjBA,EAAQ,SAAW,YACZF,EAAe,SAASE,EAAQ,IAAI,EAC3CA,EAAQ,SAAW,kBAEnB,aAAa,OAAO,SAChB,oCACAA,CAAA,EAKZtJ,EAAY,KAAK,CACb,KAAM,QACN,SAAUmJ,EAAYG,EAAQ,QAAQ,EACtC,aAAcA,EAAQ,KACtB,YACI3J,EAAe,eAAe2J,EAAQ,cAAc,GACpDA,EAAQ,IAAA,CACf,EAIL,QAASjK,EAAQ,EAAGA,EAAQ6J,EAAiB,QAAQ,OAAQ7J,IAAS,CAC5D,MAAAiK,EAAUJ,EAAiB,QAAQ7J,CAAK,EAGzCiK,EAAQ,WACLA,EAAQ,OAAS,cACjBA,EAAQ,SAAW,YAEnB,aAAa,OAAO,SAChB,qCACAA,CAAA,GAKZtJ,EAAY,KAAK,CACb,KAAM,SACN,SAAUmJ,EAAYG,EAAQ,QAAQ,EACtC,aAAcA,EAAQ,KACtB,YACI3J,EAAe,eAAe2J,EAAQ,cAAc,GACpDA,EAAQ,IAAA,CACf,EAIL,QACQjK,EAAQ,EACZA,EAAQ6J,EAAiB,eAAe,OACxC7J,IACF,CACQ,MAAAiK,EAAUJ,EAAiB,eAAe7J,CAAK,EAErDW,EAAY,KAAK,CACb,KAAM,gBACN,SAAUmJ,EAAY,iBAAiB,EACvC,aAAcG,EAAQ,KACtB,YACI3J,EAAe,eAAe2J,EAAQ,cAAc,GACpDA,EAAQ,IAAA,CACf,EAIOtJ,EAAA,QAAS4F,GAAuB,CACxC,MAAM2D,EAAmBtJ,EAAgB,KACpCxB,GACGA,EAAE,gBAAkBmH,EAAM,UAAY,QAAA,EAG1C2D,EACiBA,EAAA,SAAS,KAAK3D,CAAK,EAEpC3F,EAAgB,KAAK,CACjB,aAAc2F,EAAM,UAAY,QAChC,YAAa2B,EAAU3B,EAAM,UAAY,OAAO,EAChD,SAAU,CAACA,CAAK,CAAA,CACnB,CACL,CACH,EAED,SAASuD,EAAYjK,EAAqB,CACtC,GAAKA,EAIL,OAAOS,EAAe,eAClB,kBAAoBT,EAAI,QAAQ,IAAK,GAAG,EAAE,YAAY,CAAA,CAE9D,CACJ,CAEA,SAASwJ,GAA0BlJ,EAA+B,CAC1D,IAAAgK,EACAC,EACAC,EAKMlK,EAAA,kBAAkB,SAAUf,EAAe,CAE7C,GAAAA,EAAE,OAASkB,EAAe,OAAO,OACjClB,EAAE,OAASkB,EAAe,OAAO,SAEjC,GAAIQ,EAAU,CACN,GAAA,CAAC1B,EAAE,QACH,OAGJ,MAAMgB,EAAQD,EAAU,aAAaf,EAAE,OAAO,EAExCkL,EAAgBzJ,EAAe,QAAQT,CAAK,EAE9CkK,EAAgB,GAChBzJ,EAAe,KAAKT,CAAK,EAEzBA,EAAM,eAAe,EAAI,IAEVS,EAAA,OAAOyJ,EAAe,CAAC,EAEtClK,EAAM,eAAe,EAAK,QAEvBS,EAAe,OAAS,IAChBA,EAAA,QAAST,GAAoB,CACxCA,EAAM,eAAe,EAAK,CAAA,CAC7B,EAEDS,EAAe,OAAS,WAErBzB,EAAE,OAASkB,EAAe,OAAO,YAAc,CAAClB,EAAE,QACzDiL,EAAcjL,EAAE,gBAEhBA,EAAE,OAASkB,EAAe,OAAO,MACjClB,EAAE,eACFA,EAAE,eACFiL,EACF,CACE,MAAME,EAAcF,EAENA,EAAA,OAEdF,EAAS/K,EAAE,cAAc,EAAIA,EAAE,cAAc,EAC7CgL,EAAShL,EAAE,cAAc,EAAIA,EAAE,cAAc,EAE7C,QAAS0C,EAAI,EAAGA,EAAIjB,EAAe,OAAQiB,IAAK,CACtC,MAAA1B,EAAQS,EAAeiB,CAAC,EAE1B1B,EAAM,KAAOmK,GAIXnK,EAAA,OAAO+J,EAAQC,CAAM,GAEnC,CACH,CACL,CAGA,SAASpB,EAAkB/I,EAAyB,CAC1C,MAAAuK,EAAgBlK,EAAe,mBAErC,GAAI,CAACkK,EACD,OAIE,MAAAC,EAAUnK,EAAe,IAAI,WAC/BL,EACAuK,EAAc,aAAa,EAC3BA,EAAc,oBAAoB,CAAA,EAIhCE,EAAkBF,EACnB,kBAAkB,EAClB,mBAAmB,EAGxBC,EAAQ,GAAKC,EAAgB,KAC7BD,EAAQ,GAAKC,EAAgB,IAG7BD,EAAQ,GAAKD,EAAc,QAC3BC,EAAQ,GAAKD,EAAc,QAG3BC,EAAQ,GAAKD,EAAc,MAC3BC,EAAQ,GAAKD,EAAc,MAE3BhK,EAAY,EAAIiK,EAAQ,EACxBjK,EAAY,EAAIiK,EAAQ,CAC5B,CAEA,SAASrB,IAA2B,CAChC,SAASuB,EAAYvK,EAAuB,CAGpC,GAAA,CAACA,EAAM,gBACP,CAACA,EAAM,gBACNA,EAAM,eAAiBA,EAAM,cAE9B,OAIJA,EAAM,cAAgB,UAAqB,CACvC,MAAMwK,EAAWtK,EAAe,IAAI,cAAc,UAAU,EACnD,OAAAsK,EAAA,aACL,0BACA,KAAK,UAAU,KAAK,gBAAgB,CAAA,EAGjCA,CAAA,EAGX,MAAMC,EAAwBzK,EAAM,cAG9BA,EAAA,cAAgB,SAAUwK,EAAwB,CACpD,MAAME,EAAiBF,EAAS,aAC5B,yBAAA,EAGAE,EACA,KAAK,eAAe,KAAK,MAAMA,CAAc,CAAC,EACvCD,GAEeA,EAAA,MAAM,KAAM,SAAS,CAC/C,CAER,CAGA,UAAWzK,KAASE,EAAe,OAAO,cAAA,EACtCqK,EAAYvK,EAAM,KAAK,EAI3B,UAAWA,KAASE,EAAe,OAAO,gBAAA,EACtCqK,EAAYvK,EAAM,KAAK,CAE/B,CAEA,MAAA2K,GAAe,CAAC,EClnEhB,IAAIC,GACAC,GAGAC,GAAyCC,GAAwB,CAErE,EAEO,SAASvM,IAAa,CAErB,UAAU,UAAU,WAAa,SAIEoM,GAAAI,GAEhC,OAAA,iBACH,iCAEA,eAAgBC,EAAc,CAC1BH,GAAsCG,EAAQ,MAAM,CACxD,CAAA,EAER,CAEA,eAAeC,GAAoBC,EAA6B,CAC5D,OAAO,MAAM,UAAU,UAAU,UAAUA,CAAI,CACnD,CAEA,eAAeC,GAAoB5H,EAA+B,CACvD,OAAA,MAAM,UAAU,UAAU,MAAM,CACnC,IAAI,cAAc,CAAE,CAACA,EAAS,IAAI,EAAGA,EAAU,CAAA,CAClD,CACL,CAEA,eAAe6H,IAA0C,CACrD,OAAO,MAAMT,GAAqC,CACtD,CAEA,eAAeC,IAAiD,CACrD,OAAA,MAAM,UAAU,UAAU,UACrC,CAEA,eAAeG,IAAiD,CAE5D,OAAO,IAAI,QAAgB,CAAClG,EAASC,IAAW,CAC5C+F,GAAyCQ,GAA4B,CAC7DA,EACAxG,EAAQwG,CAAS,EAEVvG,GACX,EAGE,MAAAlF,EAAe,IAAI,MAAM,gCAAgC,EAC/D,SAAS,cAAcA,CAAK,CAAA,CAC/B,CACL,CAEA,SAAS0L,IAA0C,CAC/C,OAAO,OAAO,gBAAkB,MACpC,CAEA,SAASC,GAASP,EAAiBQ,EAAoB,CAC3C,QAAA,IAAI,WAAWR,IAAWQ,CAAK,CAC3C,CAEA,SAASC,GAAwBjM,EAAgB,CACvC,MAAAhB,EAAe,aAAa,QAAQgB,CAAG,EAEzC,GAAA,CACI,GAAA,OAAOhB,GAAS,SACT,OAAA,KAAK,MAAMA,CAAI,QAI9B,CAEA,MAAO,EACX,CAEA,SAASkN,GAAsBlM,EAAahB,EAAe,CACvD,aAAa,QAAQgB,EAAK,KAAK,UAAUhB,CAAI,CAAC,CAClD,CAEA,MAAemN,GAAA,CACX,oBAAAV,GACA,oBAAAE,GACA,uBAAAC,GACA,+BAAAE,GACA,qBAAAG,GACA,mBAAAC,GACA,SAAAH,EACJ,ECzFA,aAAa,OAASK,GACtB,aAAa,QAAUC,GACvB,aAAa,WAAaC,GAE1BC,KACAC,GAAgB"}